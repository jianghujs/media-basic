{"version":3,"file":"flv-decoder.dev.js","sources":["../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../src/emitter.js","../src/flv-demuxer.js","../src/exp-golomb.js","../src/h264-sps-parser.js","../src/fmp4-generator.js","../src/mse-decoder.js","../src/index.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export default class Emitter {\n    on(name, fn, ctx) {\n        const e = this.e || (this.e = {});\n        (e[name] || (e[name] = [])).push({fn, ctx});\n        return this;\n    }\n\n    once(name, fn, ctx) {\n        const self = this;\n\n        function listener(...args) {\n            self.off(name, listener);\n            fn.apply(ctx, args);\n        }\n\n        listener._ = fn;\n        return this.on(name, listener, ctx);\n    }\n\n    emit(name, ...data) {\n        const evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n        for (let i = 0; i < evtArr.length; i += 1) {\n            evtArr[i].fn.apply(evtArr[i].ctx, data);\n        }\n        return this;\n    }\n\n    off(name, callback) {\n        const e = this.e || (this.e = {});\n\n        if (!name) {\n            Object.keys(e).forEach((key) => {\n                delete e[key];\n            })\n            delete this.e\n            return;\n        }\n\n        const evts = e[name];\n        const liveEvents = [];\n        if (evts && callback) {\n            for (let i = 0, len = evts.length; i < len; i += 1) {\n                if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n            }\n        }\n        if (liveEvents.length) {\n            e[name] = liveEvents;\n        } else {\n            delete e[name];\n        }\n        return this;\n    }\n}\n","import Emitter from \"./emitter\";\n\nconst FLV_PARSE_STATE = {\n    init: \"init\",//\n    header: \"header\",//\n    body: \"body\",//\n}\n\nconst FLV_TAG_TYPE = {\n    audio: 8, //\n    video: 9, //\n    script: 18,//\n}\nconst FLV_TAG_TYPE_SHOW = {\n    8: \"audio\", //\n    9: \"video\", //\n    18: \"script\",//\n}\n\n\nconst CODEC_ID = {\n    h264: 7, // AVC\n    h265: 12, // HEVC\n}\nconst CODEC_ID_SHOW = {\n    7: \"h264\", // AVC\n    12: \"h265\", // HEVC\n}\n\n\nconst SOUND_ID = {\n    g711a: 7, //\n    g711u: 8, //\n    aac: 10,//\n}\n\nconst AAC_PACKET_TYPE = {\n    sequenceHeader: 0,//\n    raw: 1,//\n}\n\nconst VIDEO_FRAME_TYPE = {\n    keyFrame: 1,//\n    interFrame: 2,//\n}\n\nconst VIDEO_PACKET_TYPE = {\n    sequenceHeader: 0, //\n    nalu: 1, //\n}\n\n\nclass FlvDemuxer extends Emitter {\n    constructor() {\n        super();\n        this.tempBuffer = null;\n        //\n        this.needLen = 9;\n        this.state = FLV_PARSE_STATE.init;\n    }\n\n    destroy() {\n        this.reset();\n    }\n\n    reset() {\n        this.tempBuffer = null;\n        this.needLen = 9;\n        this.state = FLV_PARSE_STATE.init;\n    }\n\n    dispatchold(data) {\n        //\n        let remain = data;\n\n        // merge tempBuffer and data\n        if (this.tempBuffer) {\n            let newBuffer = new Uint8Array(this.tempBuffer.length + data.length);\n            newBuffer.set(this.tempBuffer, 0);\n            newBuffer.set(data, this.tempBuffer.length);\n            remain = newBuffer;\n            this.tempBuffer = undefined;\n        }\n        //\n        const tmp = new ArrayBuffer(4);\n        const dv = new DataView(tmp);\n\n        let tagType;\n        let dts;\n        let pts;\n        // parse flv\n        while (true) {\n\n            if (remain.length < this.needLen) {\n                console.log(`remain.length < this.needLen: ${remain.length} < ${this.needLen}`);\n                break;\n            }\n\n            //\n            if (this.state === FLV_PARSE_STATE.init) {\n                // flv header 9 bytes\n                let flvHeader = remain.slice(0, this.needLen);\n                console.log('flvHeader: ', flvHeader);\n                // 前3字节是 'FLV' 三个字符\n                const f = flvHeader[0];\n                const l = flvHeader[1];\n                const v = flvHeader[2];\n                // 第4字节是版本号，只有 0x01 这一个合法值\n                const version = flvHeader[3];\n                console.log('flv', f, l, v);\n                console.log('version: ', version);\n                // 第5字节是Flags ，用于鉴别是否含有音频、视频数据\n                let hasAudio = ((flvHeader[4] & 4) >>> 2) !== 0;\n                let hasVideo = (flvHeader[4] & 1) !== 0;\n                console.log('hasAudio: ', hasAudio);\n                console.log('hasVideo: ', hasVideo);\n                // 6-9字节，组成一个int32是 Header Size，这个值一定不小于0x09\n                console.log(`FLV_PARSE_STATE.init current needLen is ${this.needLen}, and next needLen is 15, and next stats is FLV_PARSE_STATE.header`)\n                //\n                remain = remain.slice(this.needLen);\n                // next length is 15 bytes 15 =  4(previous tag size)+ 11(tag header) ;\n                this.needLen = 15;\n                //\n                this.state = FLV_PARSE_STATE.header;\n            } else if (this.state === FLV_PARSE_STATE.header) {\n                // 0,1,2,3 is previous tag size\n                tagType = remain[4] & 0x1F; // 5bit代表类型,8:audio 9:video 18:script other:其他\n                console.log('FLV_PARSE_STATE.header,tagType', FLV_TAG_TYPE_SHOW[tagType]);\n                // 2-4 消息长度\n                dv.setUint8(0, remain[7]);\n                dv.setUint8(1, remain[6]);\n                dv.setUint8(2, remain[5]);\n                dv.setUint8(3, 0);\n\n                const payloadLen = dv.getUint32(0, true); //Tag 中除通用头外的长度，即 Header + Data 字段的长度 (等于 Tag 总长度 – 11)\n                // 5-7 时间戳\n                dv.setUint8(0, remain[10]);\n                dv.setUint8(1, remain[9]);\n                dv.setUint8(2, remain[8]);\n                // 8-8 时间戳扩展\n                dv.setUint8(3, remain[11]);\n\n                dts = dv.getUint32(0, true);\n\n                console.log('needLen is', this.needLen);\n                //\n                let commonHeader = remain.slice(0, this.needLen);\n                //\n                remain = remain.slice(this.needLen);\n                // 下一个长度是 tag body\n                this.needLen = payloadLen;\n                console.log(`nextLength is ${payloadLen} and next is FLV_PARSE_STATE.body`)\n                this.state = FLV_PARSE_STATE.body;\n            } else {\n                // tag body = tag header(1-5) + tag data\n                if (tagType === FLV_TAG_TYPE.video) {\n                    // 1-4bit，帧类型【FrameType】\n                    let frameType = (remain[0] >> 4) & 0x0F;\n                    //  5-8bit，编码类型【CodecID】\n                    let codecId = (remain[0]) & 0x0F;\n\n                    if (codecId === CODEC_ID.h264 || codecId === CODEC_ID.h265) {\n\n                        // h264 or h265\n                        const packetType = remain[1];\n                        console.log('frameType packetType', frameType, packetType);\n\n                        // compositionTime\n                        dv.setUint8(0, remain[4]);\n                        dv.setUint8(1, remain[3]);\n                        dv.setUint8(2, remain[2]);\n                        dv.setUint8(3, 0);\n\n                        let compositionTime = dv.getUint32(0, true);\n                        pts = dts + compositionTime;\n\n                        if (frameType === VIDEO_FRAME_TYPE.keyFrame) {\n\n                            if (packetType === VIDEO_PACKET_TYPE.sequenceHeader) {\n                                console.log(`${CODEC_ID_SHOW[codecId]} keyFrame sequenceHeader`);\n                                const config = remain.slice(0, this.needLen);\n\n                                // 用来解析video的width，height ， extraData\n                                // tag header (1-5)\n                                const extraData = remain.slice(5, this.needLen);\n                                this.emit('videoExtraData', {\n                                    codecId,\n                                    extraData,\n                                });\n                            } else if (packetType === VIDEO_PACKET_TYPE.nalu) {\n                                console.warn(`${CODEC_ID_SHOW[codecId]} keyFrame nalu, dts: ${dts}, pts: ${pts}`);\n                                // tag header (1-5)\n                                const nalu = remain.slice(5, this.needLen);\n                                this.emit('videoData', {\n                                    nalu,\n                                    timestamp: dts,\n                                    isKeyFrame: true\n                                });\n                            } else {\n                                console.warn('other packet type nalu', packetType);\n                            }\n\n                        } else if (frameType === VIDEO_FRAME_TYPE.interFrame) {\n                            if (packetType === VIDEO_PACKET_TYPE.nalu) {\n                                console.log(`${CODEC_ID_SHOW[codecId]} interFrame nalu, dts: ${dts}, pts: ${pts}`);\n                                // P Frame\n                                // tag header (1-5)\n                                const nalu = remain.slice(5, this.needLen);\n                                this.emit('videoData', {\n                                    nalu,\n                                    timestamp: dts,\n                                    isKeyFrame: false\n                                });\n                            }\n                        } else {\n                            console.log('other frame type', frameType);\n                        }\n                    }\n\n                } else if (tagType === FLV_TAG_TYPE.audio) {\n                    // 音频格式【SoundFormat】\n                    let soundId = (remain[0] >> 4) & 0x0F;\n                    let soundrate = (remain[0]>>2)&0x02;\n                    let soundsize = (remain[0]>>1)&0x01;\n                    let soundtype = (remain[0])&0x0F;\n\n                    if (soundId === SOUND_ID.aac) {\n                        // aac about sequence header and raw\n                        // [2-2]：AAC音频类型，注，只有在SoundFormat=AAC 时，才有此数据\n                        //  0 = AAC sequence header\n                        //  1 = AAC raw\n                        const packetType = remain[1];\n                        if (packetType === AAC_PACKET_TYPE.sequenceHeader) {\n                            const config = remain.slice(0, this.needLen);\n                            const aacSequenceHeader = remain.slice(2, this.needLen);\n                            console.log('AAC sequence header');\n                            this.emit('audioExtraData', {\n                                codecId: soundId,\n                                type: 'aac',\n                                extraData: aacSequenceHeader\n                            });\n                        } else {\n                            // AAC raw\n                            const aacRaw = remain.slice(2, this.needLen);\n                            console.log('AAC raw')\n                            this.emit('audioData', {\n                                type: 'aac',\n                                timestamp: dts,\n                                data: aacRaw\n                            })\n                        }\n                    } else {\n                        const type = soundId === SOUND_ID.g711a ? 'g711a' : 'g711u';\n                        this.emit('audioExtraData', {\n                            type,\n                            extraData: new Uint8Array(0)\n                        })\n                        // g711a or g711u\n                        // 音频数据\n                        const g711Raw = remain.slice(1, this.needLen);\n                        console.log('g711 raw')\n                        this.emit('audioData', {\n                            type,\n                            timestamp: dts,\n                            data: g711Raw\n                        })\n                    }\n\n                } else if (tagType === FLV_TAG_TYPE.script) {\n                    console.log('script tag');\n                } else {\n                    console.log('other tag type', tagType);\n                }\n                //\n                remain = remain.slice(this.needLen);\n                // next length is 15 bytes 15 =  4(previous tag size)+ 11(tag header) ;\n                this.needLen = 15;\n                this.state = FLV_PARSE_STATE.header;\n            }\n        }\n\n        this.tempBuffer = remain;\n    }\n\n\n    dispatch(data) {\n\n        let remain = data;\n\n        if (this.tempBuffer) {\n\n            let newbuffer = new Uint8Array(this.tempBuffer.length + data.length);\n            newbuffer.set(this.tempBuffer, 0);\n            newbuffer.set(data, this.tempBuffer.length);\n\n            remain = newbuffer;\n            this.tempBuffer = undefined;\n        }\n\n        const tmp = new ArrayBuffer(4);\n        const dv = new DataView(tmp);\n\n        while(true) {\n\n            if (remain.length < this.needLen) {\n\n                break;\n            }\n\n            if (this.state === FLV_PARSE_STATE.init) {\n\n                let flvheader = remain.slice(0, this.needLen);\n                remain = remain.slice(this.needLen);\n\n                this.needLen = 15;\n                this.state = FLV_PARSE_STATE.header;\n\n            } else if (this.state === FLV_PARSE_STATE.header) {\n\n                this._tagtype = remain[4]&0x1F; // 5bit代表类型,8:audio 9:video 18:script other:其他\n\n                dv.setUint8(0, remain[7]);\n                dv.setUint8(1, remain[6]);\n                dv.setUint8(2, remain[5]);\n                dv.setUint8(3, 0);\n\n                let payloadlen = dv.getUint32(0, true); //Tag 中除通用头外的长度，即 Header + Data 字段的长度 (等于 Tag 总长度 – 11)\n\n                dv.setUint8(0, remain[10]);\n                dv.setUint8(1, remain[9]);\n                dv.setUint8(2, remain[8]);\n                dv.setUint8(3, remain[11]);\n\n                this._dts = dv.getUint32(0, true);\n\n                let tagcommonheader = remain.slice(0, this.needLen);\n                remain = remain.slice(this.needLen);\n\n                this.needLen = payloadlen;\n                this.state = FLV_PARSE_STATE.body;\n\n            } else {\n\n                if (this._tagtype === FLV_TAG_TYPE.video) {\n\n                    let frametype = (remain[0]>>4)&0x0F;\n                    let codecid = (remain[0])&0x0F;\n\n                    if (codecid === CODEC_ID.h264 || codecid === CODEC_ID.h265) {\n\n                        let avcpackettype = remain[1];\n                        console.log('frameType packetType', frametype, avcpackettype);\n\n                        dv.setUint8(0, remain[4]);\n                        dv.setUint8(1, remain[3]);\n                        dv.setUint8(2, remain[2]);\n                        dv.setUint8(3, 0);\n\n                        let compositiontime = dv.getUint32(0, true);\n                        this._pts = this._dts + compositiontime;\n\n                        if (frametype === VIDEO_FRAME_TYPE.keyFrame) {\n\n                            if (avcpackettype === VIDEO_PACKET_TYPE.sequenceHeader) {\n                                console.log(`keyFrame sequenceHeader`);\n\n                                //avcseq\n                                // let info = readAVCSpecificConfig(remain.slice(0, this.needLen));\n\n\n                                // this._videoinfo.vtype = codecid === CodecID.AVC ? VideoType.H264 : VideoType.H265;\n                                // this._videoinfo.width = info.width;\n                                // this._videoinfo.height = info.height\n                                // this._videoinfo.extradata = remain.slice(5, this.needLen);\n                                const extraData = remain.slice(5, this.needLen);\n\n                                this.emit('videoExtraData', {\n                                    codecId:codecid,\n                                    extraData,\n                                });\n                            } else if (avcpackettype === VIDEO_PACKET_TYPE.nalu) {\n                                console.warn(`keyFrame nalu, dts: ${this._dts}`);\n\n                                //I Frame\n                                let vframe = remain.slice(5, this.needLen);\n\n\n                                this.emit('videoData', {\n                                    nalu:vframe,\n                                    timestamp: this._dts,\n                                    isKeyFrame: true\n                                });\n\n                            } else {\n\n\n                            }\n\n\n                        } else if (frametype === VIDEO_FRAME_TYPE.interFrame) {\n\n                            if (avcpackettype === VIDEO_PACKET_TYPE.nalu) {\n                                console.log(`interFrame nalu, dts: ${this._dts}`);\n                                //P Frame\n                                let vframe = remain.slice(5, this.needLen);\n\n\n                                this.emit('videoData', {\n                                    nalu:vframe,\n                                    timestamp: this._dts,\n                                    isKeyFrame: false\n                                });\n\n                            } else {\n\n\n                            }\n\n                        } else {\n\n\n                        }\n\n\n                    }\n\n                } else if (this._tagtype === FLV_TAG_TYPE.audio) {\n\n                    let soundformat = (remain[0]>>4)&0x0F;\n                    let soundrate = (remain[0]>>2)&0x02;\n                    let soundsize = (remain[0]>>1)&0x01;\n                    let soundtype = (remain[0])&0x0F;\n\n                    if (soundformat === SOUND_ID.aac) {\n\n                        let aacpackettype = remain[1];\n\n                        if (aacpackettype === AAC_PACKET_TYPE.sequenceHeader) {\n\n                            // let aacinfo = readAACSpecificConfig(remain.slice(0, this.needLen));\n\n\n                            // this._audioinfo.atype = AudioType.AAC;\n                            // this._audioinfo.profile = aacinfo.object_type;\n                            // this._audioinfo.sample = aacinfo.sample_rate;\n                            // this._audioinfo.channels = aacinfo.chan_config;\n                            // this._audioinfo.depth = soundsize ? 16 : 8;\n                            // this._audioinfo.extradata = remain.slice(2, this.needLen);\n                            const aacSequenceHeader = remain.slice(2, this.needLen);\n\n                            this.emit('audioExtraData', {\n                                codecId: soundformat,\n                                type: 'aac',\n                                extraData: aacSequenceHeader\n                            });\n\n                        } else {\n\n                            let aacraw = remain.slice(2, this.needLen);\n\n                            // let packet = new AVPacket();\n                            // packet.payload = aacraw;\n                            // packet.iskeyframe = false;\n                            // packet.timestamp = this._dts;\n                            // packet.avtype = AVType.Audio;\n\n                            this.emit('audioData', {\n                                type: 'aac',\n                                timestamp: this._dts,\n                                data: aacraw\n                            })\n                        }\n\n                    } else {\n\n                        let audioraw = remain.slice(1, this.needLen);\n                        this.emit('audioExtraData', {\n                            type,\n                            extraData: new Uint8Array(0)\n                        })\n                        const type = soundformat === SOUND_ID.g711a ? 'g711a' : 'g711u';\n\n\n                        this.emit('audioData', {\n                            type,\n                            timestamp: this._dts,\n                            data: audioraw\n                        })\n                    }\n\n                } else if (this._tagtype === FLV_TAG_TYPE.script) {\n\n\n                } else {\n\n\n                }\n\n                remain = remain.slice(this.needLen);\n\n                this.needLen = 15;\n                this.state = FLV_PARSE_STATE.header;\n            }\n\n        }\n\n        this.tempBuffer = remain;\n\n\n    }\n\n\n}\n\n\nexport default FlvDemuxer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0) {\n            // throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n        }\n\n        let bytes_read = Math.min(4, buffer_bytes_left);\n        let word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32) {\n            // throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n        }\n\n        if (bits <= this._current_word_bits_left) {\n            let result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        let bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        let result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() {  // unsigned exponential golomb\n        let leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() {  // signed exponential golomb\n        let value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;\n","\nimport ExpGolomb from './exp-golomb.js';\n\nclass SPSParser {\n\n    static _ebsp2rbsp(uint8array) {\n        let src = uint8array;\n        let src_length = src.byteLength;\n        let dst = new Uint8Array(src_length);\n        let dst_idx = 0;\n\n        for (let i = 0; i < src_length; i++) {\n            if (i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dst_idx] = src[i];\n            dst_idx++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dst_idx);\n    }\n\n    // 解析 SPS\n    // https://zhuanlan.zhihu.com/p/27896239\n    static parseSPS(uint8array) {\n        let rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb = new ExpGolomb(rbsp);\n\n        gb.readByte();\n        // 标识当前H.264码流的profile。\n        // 我们知道，H.264中定义了三种常用的档次profile： 基准档次：baseline profile;主要档次：main profile; 扩展档次：extended profile;\n\n        let profile_idc = gb.readByte();  // profile_idc\n        gb.readByte();  // constraint_set_flags[5] + reserved_zero[3]\n        // 标识当前码流的Level。编码的Level定义了某种条件下的最大视频分辨率、最大视频帧率等参数，码流所遵从的level由level_idc指定。\n        let level_idc = gb.readByte();  // level_idc\n        // 表示当前的序列参数集的id。通过该id值，图像参数集pps可以引用其代表的sps中的参数。\n        gb.readUEG();  // seq_parameter_set_id\n\n        let profile_string = SPSParser.getProfileString(profile_idc);\n\n        let level_string = SPSParser.getLevelString(level_idc);\n\n        let chroma_format_idc = 1;\n        let chroma_format = 420;\n        let chroma_format_table = [0, 420, 422, 444];\n        let bit_depth = 8;\n\n        //\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\n            profile_idc === 138 || profile_idc === 144) {\n            //\n            chroma_format_idc = gb.readUEG();\n\n            if (chroma_format_idc === 3) {\n                gb.readBits(1);  // separate_colour_plane_flag\n            }\n            if (chroma_format_idc <= 3) {\n                chroma_format = chroma_format_table[chroma_format_idc];\n            }\n\n            bit_depth = gb.readUEG() + 8;  // bit_depth_luma_minus8\n            gb.readUEG();  // bit_depth_chroma_minus8\n            gb.readBits(1);  // qpprime_y_zero_transform_bypass_flag\n            if (gb.readBool()) {  // seq_scaling_matrix_present_flag\n                let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\n                for (let i = 0; i < scaling_list_count; i++) {\n                    if (gb.readBool()) {  // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        // 用于计算MaxFrameNum的值。计算公式为MaxFrameNum = 2^(log2_max_frame_num_minus4 +\n        gb.readUEG();  // log2_max_frame_num_minus4\n        // 表示解码picture order count(POC)的方法。POC是另一种计量图像序号的方式，与frame_num有着不同的计算方法。该语法元素的取值为0、1或2。\n        let pic_order_cnt_type = gb.readUEG();\n        if (pic_order_cnt_type === 0) {\n            gb.readUEG();  // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (pic_order_cnt_type === 1) {\n            gb.readBits(1);  // delta_pic_order_always_zero_flag\n            gb.readSEG();  // offset_for_non_ref_pic\n            gb.readSEG();  // offset_for_top_to_bottom_field\n            let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                gb.readSEG();  // offset_for_ref_frame\n            }\n        }\n        // 用于表示参考帧的最大数目。\n        let ref_frames = gb.readUEG();  // max_num_ref_frames\n        // 标识位，说明frame_num中是否允许不连续的值。\n        gb.readBits(1);  // gaps_in_frame_num_value_allowed_flag\n        // 用于计算图像的宽度。单位为宏块个数，因此图像的实际宽度为:\n        let pic_width_in_mbs_minus1 = gb.readUEG();\n        // 使用PicHeightInMapUnits来度量视频中一帧图像的高度。\n        // PicHeightInMapUnits并非图像明确的以像素或宏块为单位的高度，而需要考虑该宏块是帧编码或场编码。PicHeightInMapUnits的计算方式为：\n        let pic_height_in_map_units_minus1 = gb.readUEG();\n        // 标识位，说明宏块的编码方式。当该标识位为0时，宏块可能为帧编码或场编码；\n        // 该标识位为1时，所有宏块都采用帧编码。根据该标识位取值不同，PicHeightInMapUnits的含义也不同，\n        // 为0时表示一场数据按宏块计算的高度，为1时表示一帧数据按宏块计算的高度。\n        let frame_mbs_only_flag = gb.readBits(1);\n        if (frame_mbs_only_flag === 0) {\n            // 标识位，说明是否采用了宏块级的帧场自适应编码。当该标识位为0时，不存在帧编码和场编码之间的切换；当标识位为1时，宏块可能在帧编码和场编码模式之间进行选择。\n            gb.readBits(1);  // mb_adaptive_frame_field_flag\n        }\n        // 标识位，用于B_Skip、B_Direct模式运动矢量的推导计算。\n        gb.readBits(1);  // direct_8x8_inference_flag\n\n        let frame_crop_left_offset = 0;\n        let frame_crop_right_offset = 0;\n        let frame_crop_top_offset = 0;\n        let frame_crop_bottom_offset = 0;\n\n        let frame_cropping_flag = gb.readBool();\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = gb.readUEG();\n            frame_crop_right_offset = gb.readUEG();\n            frame_crop_top_offset = gb.readUEG();\n            frame_crop_bottom_offset = gb.readUEG();\n        }\n\n        let sar_width = 1, sar_height = 1;\n        let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;\n        // 标识位，说明SPS中是否存在VUI信息。\n        let vui_parameters_present_flag = gb.readBool();\n        if (vui_parameters_present_flag) {\n            if (gb.readBool()) {  // aspect_ratio_info_present_flag\n                let aspect_ratio_idc = gb.readByte();\n                let sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                let sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33,  99, 3, 2, 1];\n\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\n                } else if (aspect_ratio_idc === 255) {\n                    sar_width = gb.readByte() << 8 | gb.readByte();\n                    sar_height = gb.readByte() << 8 | gb.readByte();\n                }\n            }\n\n            if (gb.readBool()) {  // overscan_info_present_flag\n                gb.readBool();  // overscan_appropriate_flag\n            }\n            if (gb.readBool()) {  // video_signal_type_present_flag\n                gb.readBits(4);  // video_format & video_full_range_flag\n                if (gb.readBool()) {  // colour_description_present_flag\n                    gb.readBits(24);  // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if (gb.readBool()) {  // chroma_loc_info_present_flag\n                gb.readUEG();  // chroma_sample_loc_type_top_field\n                gb.readUEG();  // chroma_sample_loc_type_bottom_field\n            }\n            if (gb.readBool()) {  // timing_info_present_flag\n                let num_units_in_tick = gb.readBits(32);\n                let time_scale = gb.readBits(32);\n                fps_fixed = gb.readBool();  // fixed_frame_rate_flag\n\n                fps_num = time_scale;\n                fps_den = num_units_in_tick * 2;\n                fps = fps_num / fps_den;\n            }\n        }\n\n        let sarScale = 1;\n        if (sar_width !== 1 || sar_height !== 1) {\n            sarScale = sar_width / sar_height;\n        }\n\n        let crop_unit_x = 0, crop_unit_y = 0;\n        if (chroma_format_idc === 0) {\n            crop_unit_x = 1;\n            crop_unit_y = 2 - frame_mbs_only_flag;\n        } else {\n            let sub_wc = (chroma_format_idc === 3) ? 1 : 2;\n            let sub_hc = (chroma_format_idc === 1) ? 2 : 1;\n            crop_unit_x = sub_wc;\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n        }\n\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n        let present_width = Math.ceil(codec_width * sarScale);\n\n        gb.destroy();\n        gb = null;\n\n\n        // 解析出来的SPS 内容。\n        return {\n            profile_string: profile_string,  // baseline, high, high10, ...\n            level_string: level_string,  // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bit_depth: bit_depth,  // 8bit, 10bit, ...\n            ref_frames: ref_frames,\n            chroma_format: chroma_format,  // 4:2:0, 4:2:2, ...\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n            frame_rate: {\n                fixed: fps_fixed,\n                fps: fps,\n                fps_den: fps_den,\n                fps_num: fps_num\n            },\n\n            sar_ratio: {\n                width: sar_width,\n                height: sar_height\n            },\n\n            codec_size: {\n                width: codec_width,\n                height: codec_height\n            },\n\n            present_size: {\n                width: present_width,\n                height: codec_height\n            }\n        };\n    }\n\n    static _skipScalingList(gb, count) {\n        let last_scale = 8, next_scale = 8;\n        let delta_scale = 0;\n        for (let i = 0; i < count; i++) {\n            if (next_scale !== 0) {\n                delta_scale = gb.readSEG();\n                next_scale = (last_scale + delta_scale + 256) % 256;\n            }\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\n        }\n    }\n\n    // profile_idc = 66 → baseline profile;\n    // profile_idc = 77 → main profile;\n    // profile_idc = 88 → extended profile;\n    // 在新版的标准中，还包括了High、High 10、High 4:2:2、High 4:4:4、High 10 Intra、High\n    // 4:2:2 Intra、High 4:4:4 Intra、CAVLC 4:4:4 Intra\n    static getProfileString(profile_idc) {\n        switch (profile_idc) {\n            case 66:\n                return 'Baseline';\n            case 77:\n                return 'Main';\n            case 88:\n                return 'Extended';\n            case 100:\n                return 'High';\n            case 110:\n                return 'High10';\n            case 122:\n                return 'High422';\n            case 244:\n                return 'High444';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    static getLevelString(level_idc) {\n        return (level_idc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma) {\n        switch (chroma) {\n            case 420:\n                return '4:2:0';\n            case 422:\n                return '4:2:2';\n            case 444:\n                return '4:4:4';\n            default:\n                return 'Unknown';\n        }\n    }\n\n}\n\nexport default SPSParser;","class MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [],\n            avcC: [],\n            hvc1: [],\n            hvcC: [],\n            btrt: [],\n            dinf: [],\n            dref: [],\n            esds: [],\n            ftyp: [],\n            hdlr: [],\n            mdat: [],\n            mdhd: [],\n            mdia: [],\n            mfhd: [],\n            minf: [],\n            moof: [],\n            moov: [],\n            mp4a: [],\n            mvex: [],\n            mvhd: [],\n            sdtp: [],\n            stbl: [],\n            stco: [],\n            stsc: [],\n            stsd: [],\n            stsz: [],\n            stts: [],\n            tfdt: [],\n            tfhd: [],\n            traf: [],\n            trak: [],\n            trun: [],\n            trex: [],\n            tkhd: [],\n            vmhd: [],\n            smhd: []\n        };\n\n        for (let name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        let constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\n            0x0, 0x0, 0x0, 0x1,   // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D,  // isom\n            0x61, 0x76, 0x63, 0x31   // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01   // entry_count\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // entry_count\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // sample_size\n            0x00, 0x00, 0x00, 0x00   // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01,  // entry_count\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\n            0x00, 0x00,              // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\n            0x00, 0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type) {\n        let size = 8;\n        let result = null;\n        let datas = Array.prototype.slice.call(arguments, 1);\n        let arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF;  // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>> 8) & 0xFF;\n        result[3] = (size) & 0xFF;\n\n        result.set(type, 4);  // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) {  // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta) {\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        let moov = MP4.moov(meta);\n\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        let trak = MP4.trak(meta);\n        let mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id, duration = meta.duration;\n        let width = meta.presentWidth, height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            (width >>> 8) & 0xFF,    // width and height\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF,\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta))\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        let timescale = meta.timescale;\n        let duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>> 8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4,             // language: und (undetermined)\n            0x00, 0x00              // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta) {\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        let result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    // Sample table box\n    static stbl(meta) {\n        let result = MP4.box(MP4.types.stbl,  // type: stbl\n            MP4.stsd(meta),  // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\n        );\n        return result;\n    }\n\n    // Sample description box\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            if (meta.videoType === 'avc') {\n                //\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n            } else {\n                //\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.hvc1(meta))\n            }\n        }\n    }\n\n    static mp4a(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        let config = meta.config || [];\n        let configSize = config.length;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\n\n            0x03,                    // descriptor_type\n            0x17 + configSize,       // length3\n            0x00, 0x01,              // es_id\n            0x00,                    // stream_priority\n\n            0x04,                    // descriptor_type\n            0x0F + configSize,       // length\n            0x40,                    // codec: mpeg4_audio\n            0x15,                    // stream_type: Audio\n            0x00, 0x00, 0x00,        // buffer_size\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\n\n            0x05                     // descriptor_type\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02         // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    // avc\n    static avc1(meta) {\n        let avcc = meta.avcc;\n        const width = meta.codecWidth;\n        const height = meta.codecHeight;\n        let data = new Uint8Array([\n            0, 0, 0, 0,\n            0, 0, 0, 1,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            width >>> 8 & 255,\n            width & 255,\n            height >>> 8 & 255,\n            height & 255,\n            0, 72, 0, 0,\n            0, 72, 0, 0,\n            0, 0, 0, 0,\n            0, 1,\n            0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0,\n            0, 24,\n            255, 255]\n        );\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc))\n    }\n\n    // hvc\n    static hvc1(meta) {\n        let avcc = meta.avcc;\n        const width = meta.codecWidth;\n        const height = meta.codecHeight;\n        let data = new Uint8Array([\n            0, 0, 0, 0,\n            0, 0, 0, 1,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            width >>> 8 & 255,\n            width & 255,\n            height >>> 8 & 255,\n            height & 255,\n            0, 72, 0, 0,\n            0, 72, 0, 0,\n            0, 0, 0, 0,\n            0, 1,\n            0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0, 0,\n            0, 0, 0,\n            0, 24,\n            255, 255\n        ]);\n        return MP4.box(MP4.types.hvc1, data, MP4.box(MP4.types.hvcC, avcc))\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta))\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        let trackId = meta.id;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime))\n    }\n    //\n    static mfhd(sequenceNumber) {\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>> 8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        let trackId = track.id;\n\n        // Track fragment header box\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>> 8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>> 8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        let sdtp = MP4.sdtp(track);\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        let data = new Uint8Array(4 + 1);\n        let flags = track.flags;\n        data[4] = flags.isLeading << 6\n            | flags.dependsOn << 4\n            | flags.isDependedOn << 2\n            | flags.hasRedundancy;\n        return MP4.box(MP4.types.sdtp, data);\n    }\n    // trun\n    static trun(track, offset) {\n        let dataSize = 12 + 16;\n        let data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\n            0x00, 0x00, 0x00, 0x01, // sample_count\n            (offset >>> 24) & 0xFF,      // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>> 8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        let duration = track.duration;\n        let size = track.size;\n        let flags = track.flags;\n        let cts = track.cts;\n\n        data.set([\n            (duration >>> 24) & 0xFF,  // sample_duration\n            (duration >>> 16) & 0xFF,\n            (duration >>> 8) & 0xFF,\n            (duration) & 0xFF,\n            (size >>> 24) & 0xFF,      // sample_size\n            (size >>> 16) & 0xFF,\n            (size >>> 8) & 0xFF,\n            (size) & 0xFF,\n            (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\n            (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n            0x00, 0x00,                // sample_degradation_priority\n            (cts >>> 24) & 0xFF,       // sample_composition_time_offset\n            (cts >>> 16) & 0xFF,\n            (cts >>> 8) & 0xFF,\n            (cts) & 0xFF\n        ], 12);\n\n        return MP4.box(MP4.types.trun, data);\n    }\n    // mdat\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data)\n    }\n}\n\nMP4.init();\n\nexport default MP4;\n","import Emitter from \"./emitter\";\nimport SPSParser from \"./h264-sps-parser\";\nimport MP4 from \"./fmp4-generator\";\n\nfunction parseAVCDecoderConfigurationRecord(arrayBuffer) {\n    const meta = {}\n    const v = new DataView(arrayBuffer.buffer);\n    let version = v.getUint8(0);  // configurationVersion\n    let avcProfile = v.getUint8(1);  // avcProfileIndication\n    let profileCompatibility = v.getUint8(2);  // profile_compatibil\n    let avcLevel = v.getUint8(3);  // AVCLevelIndication\n\n    if (version !== 1 || avcProfile === 0) {\n        // this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n\n        return {};\n    }\n\n    const _naluLengthSize = (v.getUint8(4) & 3) + 1;  // lengthSizeMinusOne\n\n    if (_naluLengthSize !== 3 && _naluLengthSize !== 4) {  // holy shit!!!\n        // this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${_naluLengthSize - 1}`);\n        return {};\n    }\n    let spsCount = v.getUint8(5) & 31;  // numOfSequenceParameterSets\n\n    if (spsCount === 0) {\n        // this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n        return {};\n    } else if (spsCount > 1) {\n        // Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${spsCount}`);\n    }\n\n    let offset = 6;\n    for (let i = 0; i < spsCount; i++) {\n        let len = v.getUint16(offset, false);  // sequenceParameterSetLength\n        offset += 2;\n\n        if (len === 0) {\n            continue;\n        }\n\n        // Notice: Nalu without startcode header (00 00 00 01)\n        let sps = new Uint8Array(arrayBuffer.buffer, offset, len);\n        offset += len;\n        // flv.js作者选择了自己来解析这个数据结构，也是迫不得已，因为JS环境下没有ffmpeg，解析这个结构主要是为了提取 sps和pps。虽然理论上sps允许有多个，但其实一般就一个。\n        // packetTtype 为 1 表示 NALU，NALU= network abstract layer unit，这是H.264的概念，网络抽象层数据单元，其实简单理解就是一帧视频数据。\n        // pps的信息没什么用，所以作者只实现了sps的分析器，说明作者下了很大功夫去学习264的标准，其中的Golomb解码还是挺复杂的，能解对不容易，我在PC和手机平台都是用ffmpeg去解析的。\n        // SPS里面包括了视频分辨率，帧率，profile level等视频重要信息。\n        let config = SPSParser.parseSPS(sps);\n        // console.log('h264 sps config',config)\n        if (i !== 0) {\n            // ignore other sps's config\n            continue;\n        }\n        meta.sps = sps;\n        meta.timescale = 1000;\n        meta.codecWidth = config.codec_size.width;\n        meta.codecHeight = config.codec_size.height;\n        meta.presentWidth = config.present_size.width;\n        meta.presentHeight = config.present_size.height;\n\n        meta.profile = config.profile_string;\n        meta.level = config.level_string;\n        meta.bitDepth = config.bit_depth;\n        meta.chromaFormat = config.chroma_format;\n        meta.sarRatio = config.sar_ratio;\n        meta.frameRate = config.frame_rate;\n\n        if (config.frame_rate.fixed === false ||\n            config.frame_rate.fps_num === 0 ||\n            config.frame_rate.fps_den === 0) {\n            meta.frameRate = {\n                fixed: true,\n                fps: 23.976,\n                fps_num: 23976,\n                fps_den: 1000\n            };\n        }\n\n        let fps_den = meta.frameRate.fps_den;\n        let fps_num = meta.frameRate.fps_num;\n\n        meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\n\n        let codecArray = sps.subarray(1, 4);\n\n        let codecString = 'avc1.';\n        for (let j = 0; j < 3; j++) {\n            let h = codecArray[j].toString(16);\n            if (h.length < 2) {\n                h = '0' + h;\n            }\n            codecString += h;\n        }\n        // codec\n        meta.codec = codecString;\n    }\n\n    let ppsCount = v.getUint8(offset);  // numOfPictureParameterSets\n    if (ppsCount === 0) {\n        // this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n        return {};\n    } else if (ppsCount > 1) {\n        // Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ppsCount}`);\n    }\n\n    offset++;\n    for (let i = 0; i < ppsCount; i++) {\n        let len = v.getUint16(offset, false);  // pictureParameterSetLength\n        offset += 2;\n\n        if (len === 0) {\n            continue;\n        }\n        let pps = new Uint8Array(arrayBuffer.buffer, offset, len);\n\n        // pps is useless for extracting video information\n        offset += len;\n        meta.pps = pps;\n    }\n\n    meta.videoType = 'avc';\n\n    if (meta.sps) {\n        const spsLength = meta.sps.byteLength;\n        const spsFlag = new Uint8Array([\n            (spsLength >>> 24) & 0xFF,\n            (spsLength >>> 16) & 0xFF,\n            (spsLength >>> 8) & 0xFF,\n            (spsLength) & 0xFF\n        ])\n        const sps = new Uint8Array(spsLength + 4);\n        sps.set(spsFlag, 0);\n        sps.set(meta.sps, 4);\n        meta.sps = sps;\n    }\n\n    if (meta.pps) {\n        const ppsLength = meta.pps.byteLength;\n        const ppsFlag = new Uint8Array([\n            (ppsLength >>> 24) & 0xFF,\n            (ppsLength >>> 16) & 0xFF,\n            (ppsLength >>> 8) & 0xFF,\n            (ppsLength) & 0xFF\n        ]);\n        const pps = new Uint8Array(ppsLength + 4);\n        pps.set(ppsFlag, 0);\n        pps.set(meta.pps, 4);\n        meta.pps = pps;\n    }\n\n\n    // meta.avcc = arrayBuffer;\n    return meta;\n}\n\nconst MEDIA_SOURCE_STATE = {\n    ended: 'ended',\n    open: 'open',\n    closed: 'closed'\n}\n\nclass MseDecoder extends Emitter {\n    constructor(options) {\n        super();\n        this.hasInit = false;\n        this.isInitInfo = false;\n        this.isDecodeFirstIIframe = false;\n        this.codecId = null;\n        this.mediaSourceOpen = false;\n        this.sourceBuffer = null;\n        this.hasInit = false;\n        this.sequenceNumber = 0;\n        this.cacheTrack = null;\n        this.timeInit = false;\n        this.mediaSource = new window.MediaSource();\n        this.mediaSourceObjectURL = window.URL.createObjectURL(this.mediaSource);\n        this.$videoElement = options.$videoElement;\n        this.$videoElement.src = this.mediaSourceObjectURL;\n    }\n\n    destroy() {\n        this.mediaSource = null;\n        this.mediaSourceOpen = false;\n        this.sourceBuffer = null;\n        this.hasInit = false;\n        this.isInitInfo = false;\n        this.sequenceNumber = 0;\n        this.cacheTrack = null;\n        this.timeInit = false;\n        this.isDecodeFirstIIframe = false;\n        this.off();\n    }\n\n    setCodecVideo(codecId, extraData) {\n        let config = {};\n\n        config = parseAVCDecoderConfigurationRecord(extraData)\n        const metaData = {\n            id: 1, // video tag data\n            type: 'video',\n            timescale: 1000,\n            duration: 0,\n            avcc: extraData,\n            codecWidth: config.codecWidth,\n            codecHeight: config.codecHeight,\n            videoType: config.videoType\n        }\n        const metaBox = MP4.generateInitSegment(metaData);\n        this._appendBuffer(metaBox.buffer);\n        this.sequenceNumber = 0;\n        this.cacheTrack = null;\n        this.timeInit = false;\n    }\n\n    decodeVideo(payload, isIframe, ts) {\n        if (!this.isDecodeFirstIIframe && isIframe) {\n            this.isDecodeFirstIIframe = true;\n        }\n\n        if (this.isDecodeFirstIIframe) {\n            if (this.firstRenderTime === null) {\n                this.firstRenderTime = ts;\n            }\n            const dts = ts - this.firstRenderTime;\n\n            this._decodeVideo(payload, ts, isIframe);\n        }\n    }\n\n    _decodeVideo(arrayBuffer, dts, isIframe) {\n        let bytes = arrayBuffer.byteLength;\n        const $video = this.$videoElement;\n        if ($video.buffered.length > 1) {\n            this._removeBuffer($video.buffered.start(0), $video.buffered.end(0));\n            this.timeInit = false;\n        }\n        if (this.dropping && dts - this.cacheTrack.dts > 2) {\n            this.dropping = false;\n            this.cacheTrack = {};\n        }else if (this.cacheTrack && dts >= this.cacheTrack.dts) {\n            // 需要额外加8个size\n            let mdatBytes = 8 + this.cacheTrack.size;\n            let mdatbox = new Uint8Array(mdatBytes);\n            mdatbox[0] = mdatBytes >>> 24 & 255;\n            mdatbox[1] = mdatBytes >>> 16 & 255;\n            mdatbox[2] = mdatBytes >>> 8 & 255;\n            mdatbox[3] = mdatBytes & 255;\n            mdatbox.set(MP4.types.mdat, 4);\n            mdatbox.set(this.cacheTrack.data, 8);\n\n            this.cacheTrack.duration = dts - this.cacheTrack.dts;\n            // moof\n            let moofbox = MP4.moof(this.cacheTrack, this.cacheTrack.dts);\n            let result = new Uint8Array(moofbox.byteLength + mdatbox.byteLength);\n            result.set(moofbox, 0);\n            result.set(mdatbox, moofbox.byteLength);\n            // appendBuffer\n            this._appendBuffer(result.buffer)\n        }\n        else {\n            this.timeInit = false;\n            this.cacheTrack = {};\n        }\n        if (!this.cacheTrack) {\n            this.cacheTrack = {};\n        }\n        this.cacheTrack.id = 1;\n        this.cacheTrack.sequenceNumber = ++this.sequenceNumber;\n        this.cacheTrack.size = bytes;\n        this.cacheTrack.dts = dts;\n        this.cacheTrack.cts = 0;\n        this.cacheTrack.isKeyframe = isIframe;\n        this.cacheTrack.data = arrayBuffer;\n        //\n        this.cacheTrack.flags = {\n            isLeading: 0,\n            dependsOn: isIframe ? 2 : 1,\n            isDependedOn: isIframe ? 1 : 0,\n            hasRedundancy: 0,\n            isNonSync: isIframe ? 0 : 1\n        }\n\n        if (!this.timeInit && $video.buffered.length === 1) {\n            this.timeInit = true;\n            $video.currentTime = $video.buffered.end(0);\n        }\n\n        if (!this.isInitInfo && $video.videoWidth > 0 && $video.videoHeight > 0) {\n            this.isInitInfo = true;\n        }\n    }\n\n    _removeBuffer(start, end) {\n        if (this.isStateOpen && this.sourceBuffer.updating === false) {\n            try {\n                this.sourceBuffer.remove(start, end)\n            } catch (e) {\n                console.warn('removeBuffer() error', e);\n            }\n        } else {\n            console.warn('removeBuffer() this.isStateOpen is', this.isStateOpen, 'this.sourceBuffer.updating', this.sourceBuffer.updating);\n        }\n    }\n\n    _appendBuffer(buffer) {\n        if (this.sourceBuffer === null) {\n            this.sourceBuffer = this.mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.64002A\"');\n        }\n\n        if (this.sourceBuffer.updating === false && this.isStateOpen) {\n            try {\n                this.sourceBuffer.appendBuffer(buffer);\n            } catch (e) {\n            }\n            return;\n        }\n\n        if (this.isStateClosed) {\n            console.warn('MediaSource is closed')\n        } else if (this.isStateEnded) {\n            console.warn('MediaSource is ended')\n        } else {\n            if (this.sourceBuffer.updating === true) {\n                console.warn('sourceBuffer.updating === true')\n            }\n        }\n\n    }\n\n    get state() {\n        return this.mediaSource && this.mediaSource.readyState\n    }\n\n    get isStateEnded() {\n        return this.state === MEDIA_SOURCE_STATE.ended;\n    }\n\n    get isStateClosed() {\n        return this.state === MEDIA_SOURCE_STATE.closed;\n    }\n\n    get isStateOpen() {\n        return this.state === MEDIA_SOURCE_STATE.open;\n    }\n}\n\nexport default MseDecoder","import FlvDemuxer from \"./flv-demuxer\";\nimport MseDecoder from \"./mse-decoder\";\n\nwindow.FlvDemuxer = FlvDemuxer;\nwindow.MseDecoder = MseDecoder;\nexport default {\n    FlvDemuxer,\n    MseDecoder\n}\n"],"names":["require$$0","Emitter","_classCallCheck","_createClass","key","value","on","name","fn","ctx","e","push","once","self","listener","off","_len","arguments","length","args","Array","_key","apply","_","emit","evtArr","slice","_len2","data","_key2","i","callback","Object","keys","forEach","evts","liveEvents","len","FLV_PARSE_STATE","init","header","body","FLV_TAG_TYPE","audio","video","script","FLV_TAG_TYPE_SHOW","CODEC_ID","h264","h265","CODEC_ID_SHOW","SOUND_ID","g711a","g711u","aac","AAC_PACKET_TYPE","sequenceHeader","raw","VIDEO_FRAME_TYPE","keyFrame","interFrame","VIDEO_PACKET_TYPE","nalu","FlvDemuxer","_Emitter","_inherits","_super","_createSuper","_this","call","tempBuffer","needLen","state","destroy","reset","dispatchold","remain","newBuffer","Uint8Array","set","undefined","tmp","ArrayBuffer","dv","DataView","tagType","dts","pts","console","log","concat","flvHeader","f","l","v","version","hasAudio","hasVideo","setUint8","payloadLen","getUint32","frameType","codecId","packetType","compositionTime","extraData","warn","timestamp","isKeyFrame","soundId","aacSequenceHeader","type","aacRaw","g711Raw","dispatch","newbuffer","_tagtype","payloadlen","_dts","frametype","codecid","avcpackettype","compositiontime","_pts","vframe","soundformat","aacpackettype","aacraw","audioraw","ExpGolomb","uint8array","TAG","_buffer","_buffer_index","_total_bytes","byteLength","_total_bits","_current_word","_current_word_bits_left","_fillCurrentWord","buffer_bytes_left","bytes_read","Math","min","word","subarray","buffer","readBits","bits","result","bits_need_left","bits_read_next","result2","readBool","readByte","_skipLeadingZero","zero_count","readUEG","leading_zeros","readSEG","SPSParser","_ebsp2rbsp","src","src_length","dst","dst_idx","parseSPS","rbsp","gb","profile_idc","level_idc","profile_string","getProfileString","level_string","getLevelString","chroma_format_idc","chroma_format","chroma_format_table","bit_depth","scaling_list_count","_skipScalingList","pic_order_cnt_type","num_ref_frames_in_pic_order_cnt_cycle","ref_frames","pic_width_in_mbs_minus1","pic_height_in_map_units_minus1","frame_mbs_only_flag","frame_crop_left_offset","frame_crop_right_offset","frame_crop_top_offset","frame_crop_bottom_offset","frame_cropping_flag","sar_width","sar_height","fps","fps_fixed","fps_num","fps_den","vui_parameters_present_flag","aspect_ratio_idc","sar_w_table","sar_h_table","num_units_in_tick","time_scale","sarScale","crop_unit_x","crop_unit_y","sub_wc","sub_hc","codec_width","codec_height","present_width","ceil","chroma_format_string","getChromaFormatString","frame_rate","fixed","sar_ratio","width","height","codec_size","present_size","count","last_scale","next_scale","delta_scale","toFixed","chroma","MP4","types","avc1","avcC","hvc1","hvcC","btrt","dinf","dref","esds","ftyp","hdlr","mdat","mdhd","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","sdtp","stbl","stco","stsc","stsd","stsz","stts","tfdt","tfhd","traf","trak","trun","trex","tkhd","vmhd","smhd","hasOwnProperty","charCodeAt","constants","FTYP","STSD_PREFIX","STTS","STSC","STCO","STSZ","HDLR_VIDEO","HDLR_AUDIO","DREF","SMHD","VMHD","box","size","datas","prototype","arrayCount","offset","generateInitSegment","meta","timescale","duration","trackId","id","presentWidth","presentHeight","xmhd","videoType","channelCount","sampleRate","audioSampleRate","config","configSize","avcc","codecWidth","codecHeight","track","baseMediaDecodeTime","sequenceNumber","flags","isLeading","dependsOn","isDependedOn","hasRedundancy","dataSize","cts","isNonSync","parseAVCDecoderConfigurationRecord","arrayBuffer","getUint8","avcProfile","_naluLengthSize","spsCount","getUint16","sps","profile","level","bitDepth","chromaFormat","sarRatio","frameRate","refSampleDuration","codecArray","codecString","j","h","toString","codec","ppsCount","pps","spsLength","spsFlag","ppsLength","ppsFlag","MEDIA_SOURCE_STATE","ended","open","closed","MseDecoder","options","hasInit","isInitInfo","isDecodeFirstIIframe","mediaSourceOpen","sourceBuffer","cacheTrack","timeInit","mediaSource","window","MediaSource","mediaSourceObjectURL","URL","createObjectURL","$videoElement","setCodecVideo","metaData","metaBox","_appendBuffer","decodeVideo","payload","isIframe","ts","firstRenderTime","_decodeVideo","bytes","$video","buffered","_removeBuffer","start","end","dropping","mdatBytes","mdatbox","moofbox","isKeyframe","currentTime","videoWidth","videoHeight","isStateOpen","updating","remove","addSourceBuffer","appendBuffer","isStateClosed","isStateEnded","get","readyState"],"mappings":";;;;;;;;;;;;;;;CAAA,SAAS,eAAe,CAAC,QAAQ,EAAE,WAAW,EAAE;CAChD,EAAE,IAAI,EAAE,QAAQ,YAAY,WAAW,CAAC,EAAE;CAC1C,IAAI,MAAM,IAAI,SAAS,CAAC,mCAAmC,CAAC,CAAC;CAC7D,GAAG;CACH,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,eAAe,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCL9G,SAAS,OAAO,CAAC,GAAG,EAAE;CACtB,EAAE,yBAAyB,CAAC;AAC5B;CACA,EAAE,OAAO,CAAC,MAAc,CAAA,OAAA,GAAG,OAAO,GAAG,UAAU,IAAI,OAAO,MAAM,IAAI,QAAQ,IAAI,OAAO,MAAM,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE;CACxH,IAAI,OAAO,OAAO,GAAG,CAAC;CACtB,GAAG,GAAG,UAAU,GAAG,EAAE;CACrB,IAAI,OAAO,GAAG,IAAI,UAAU,IAAI,OAAO,MAAM,IAAI,GAAG,CAAC,WAAW,KAAK,MAAM,IAAI,GAAG,KAAK,MAAM,CAAC,SAAS,GAAG,QAAQ,GAAG,OAAO,GAAG,CAAC;CAChI,GAAG,EAAE,yBAAyB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;CACjG,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,OAAO,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCTtG,IAAI,OAAO,GAAGA,SAAsB,CAAC,SAAS,CAAC,CAAC;CAChD,SAAS,YAAY,CAAC,KAAK,EAAE,IAAI,EAAE;CACnC,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE,OAAO,KAAK,CAAC;CAClE,EAAE,IAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;CACvC,EAAE,IAAI,IAAI,KAAK,SAAS,EAAE;CAC1B,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,SAAS,CAAC,CAAC;CAClD,IAAI,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE,OAAO,GAAG,CAAC;CAC9C,IAAI,MAAM,IAAI,SAAS,CAAC,8CAA8C,CAAC,CAAC;CACxE,GAAG;CACH,EAAE,OAAO,CAAC,IAAI,KAAK,QAAQ,GAAG,MAAM,GAAG,MAAM,EAAE,KAAK,CAAC,CAAC;CACtD,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,YAAY,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCX3G,IAAI,OAAO,GAAGA,SAAsB,CAAC,SAAS,CAAC,CAAC;AACF;CAC9C,SAAS,cAAc,CAAC,GAAG,EAAE;CAC7B,EAAE,IAAI,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;CACvC,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,KAAK,QAAQ,GAAG,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;CACvD,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,cAAc,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCL7G,SAAS,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE;CAC1C,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CACzC,IAAI,IAAI,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;CAC9B,IAAI,UAAU,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,IAAI,KAAK,CAAC;CAC3D,IAAI,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC;CACnC,IAAI,IAAI,OAAO,IAAI,UAAU,EAAE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;CAC1D,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC;CAC7E,GAAG;CACH,CAAC;CACD,SAAS,YAAY,CAAC,WAAW,EAAE,UAAU,EAAE,WAAW,EAAE;CAC5D,EAAE,IAAI,UAAU,EAAE,iBAAiB,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;CACvE,EAAE,IAAI,WAAW,EAAE,iBAAiB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;CAC/D,EAAE,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,WAAW,EAAE;CAClD,IAAI,QAAQ,EAAE,KAAK;CACnB,GAAG,CAAC,CAAC;CACL,EAAE,OAAO,WAAW,CAAC;CACrB,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,YAAY,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CClB3G,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;CAC/B,EAAE,MAAA,CAAA,OAAc,GAAG,eAAe,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,SAAS,eAAe,CAAC,CAAC,EAAE,CAAC,EAAE;CAC3H,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC;CACpB,IAAI,OAAO,CAAC,CAAC;CACb,GAAG,EAAE,MAAA,CAAA,OAAA,CAAA,UAAyB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;CAClF,EAAE,OAAO,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;CAC/B,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,eAAe,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCN9G,SAAS,SAAS,CAAC,QAAQ,EAAE,UAAU,EAAE;CACzC,EAAE,IAAI,OAAO,UAAU,KAAK,UAAU,IAAI,UAAU,KAAK,IAAI,EAAE;CAC/D,IAAI,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;CAC9E,GAAG;CACH,EAAE,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,IAAI,UAAU,CAAC,SAAS,EAAE;CACzE,IAAI,WAAW,EAAE;CACjB,MAAM,KAAK,EAAE,QAAQ;CACrB,MAAM,QAAQ,EAAE,IAAI;CACpB,MAAM,YAAY,EAAE,IAAI;CACxB,KAAK;CACL,GAAG,CAAC,CAAC;CACL,EAAE,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE;CAC/C,IAAI,QAAQ,EAAE,KAAK;CACnB,GAAG,CAAC,CAAC;CACL,EAAE,IAAI,UAAU,EAAE,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;CACvD,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,SAAS,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCjBxG,SAAS,sBAAsB,CAAC,IAAI,EAAE;CACtC,EAAE,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE;CACvB,IAAI,MAAM,IAAI,cAAc,CAAC,2DAA2D,CAAC,CAAC;CAC1F,GAAG;CACH,EAAE,OAAO,IAAI,CAAC;CACd,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,sBAAsB,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCNrH,IAAI,OAAO,GAAGA,SAAsB,CAAC,SAAS,CAAC,CAAC;AACkB;CAClE,SAAS,0BAA0B,CAAC,IAAI,EAAE,IAAI,EAAE;CAChD,EAAE,IAAI,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,UAAU,CAAC,EAAE;CAC1E,IAAI,OAAO,IAAI,CAAC;CAChB,GAAG,MAAM,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE;CAC9B,IAAI,MAAM,IAAI,SAAS,CAAC,0DAA0D,CAAC,CAAC;CACpF,GAAG;CACH,EAAE,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;CACrC,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,0BAA0B,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;;CCVzH,SAAS,eAAe,CAAC,CAAC,EAAE;CAC5B,EAAE,cAAc,GAAG,eAAe,GAAG,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,SAAS,eAAe,CAAC,CAAC,EAAE;CACxH,IAAI,OAAO,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;CACnD,GAAG,EAAE,MAAA,CAAA,OAAA,CAAA,UAAyB,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;CAClF,EAAE,OAAO,eAAe,CAAC,CAAC,CAAC,CAAC;CAC5B,CAAC;CACD,MAAA,CAAA,OAAc,GAAG,eAAe,EAAE,MAAyB,CAAA,OAAA,CAAA,UAAA,GAAG,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,OAAO,CAAA;;;;;KCNzFC,OAAO,gBAAA,YAAA;CAAA,EAAA,SAAAA,OAAA,GAAA;CAAAC,IAAAA,eAAA,OAAAD,OAAA,CAAA,CAAA;CAAA,GAAA;CAAAE,EAAAA,YAAA,CAAAF,OAAA,EAAA,CAAA;KAAAG,GAAA,EAAA,IAAA;KAAAC,KAAA,EACxB,SAAAC,EAAGC,CAAAA,IAAI,EAAEC,EAAE,EAAEC,GAAG,EAAE;CACd,MAAA,IAAMC,CAAC,GAAG,IAAI,CAACA,CAAC,KAAK,IAAI,CAACA,CAAC,GAAG,EAAE,CAAC,CAAA;CACjC,MAAA,CAACA,CAAC,CAACH,IAAI,CAAC,KAAKG,CAAC,CAACH,IAAI,CAAC,GAAG,EAAE,CAAC,EAAEI,IAAI,CAAC;CAACH,QAAAA,EAAE,EAAFA,EAAE;CAAEC,QAAAA,GAAG,EAAHA,GAAAA;CAAG,OAAC,CAAC,CAAA;CAC3C,MAAA,OAAO,IAAI,CAAA;CACf,KAAA;CAAC,GAAA,EAAA;KAAAL,GAAA,EAAA,MAAA;KAAAC,KAAA,EAED,SAAAO,IAAKL,CAAAA,IAAI,EAAEC,EAAE,EAAEC,GAAG,EAAE;OAChB,IAAMI,IAAI,GAAG,IAAI,CAAA;OAEjB,SAASC,QAAQA,GAAU;CACvBD,QAAAA,IAAI,CAACE,GAAG,CAACR,IAAI,EAAEO,QAAQ,CAAC,CAAA;CAAC,QAAA,KAAA,IAAAE,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADRC,IAAI,GAAAC,IAAAA,KAAA,CAAAJ,IAAA,GAAAK,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA,EAAA,EAAA;CAAJF,UAAAA,IAAI,CAAAE,IAAA,CAAAJ,GAAAA,SAAA,CAAAI,IAAA,CAAA,CAAA;CAAA,SAAA;CAErBb,QAAAA,EAAE,CAACc,KAAK,CAACb,GAAG,EAAEU,IAAI,CAAC,CAAA;CACvB,OAAA;OAEAL,QAAQ,CAACS,CAAC,GAAGf,EAAE,CAAA;OACf,OAAO,IAAI,CAACF,EAAE,CAACC,IAAI,EAAEO,QAAQ,EAAEL,GAAG,CAAC,CAAA;CACvC,KAAA;CAAC,GAAA,EAAA;KAAAL,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EAED,SAAAmB,IAAKjB,CAAAA,IAAI,EAAW;OAChB,IAAMkB,MAAM,GAAG,CAAC,CAAC,IAAI,CAACf,CAAC,KAAK,IAAI,CAACA,CAAC,GAAG,EAAE,CAAC,EAAEH,IAAI,CAAC,IAAI,EAAE,EAAEmB,KAAK,EAAE,CAAA;OAAC,KAAAC,IAAAA,KAAA,GAAAV,SAAA,CAAAC,MAAA,EADrDU,IAAI,OAAAR,KAAA,CAAAO,KAAA,GAAAA,CAAAA,GAAAA,KAAA,WAAAE,KAAA,GAAA,CAAA,EAAAA,KAAA,GAAAF,KAAA,EAAAE,KAAA,EAAA,EAAA;CAAJD,QAAAA,IAAI,CAAAC,KAAA,GAAAZ,CAAAA,CAAAA,GAAAA,SAAA,CAAAY,KAAA,CAAA,CAAA;CAAA,OAAA;CAEd,MAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,CAACP,MAAM,EAAEY,CAAC,IAAI,CAAC,EAAE;CACvCL,QAAAA,MAAM,CAACK,CAAC,CAAC,CAACtB,EAAE,CAACc,KAAK,CAACG,MAAM,CAACK,CAAC,CAAC,CAACrB,GAAG,EAAEmB,IAAI,CAAC,CAAA;CAC3C,OAAA;CACA,MAAA,OAAO,IAAI,CAAA;CACf,KAAA;CAAC,GAAA,EAAA;KAAAxB,GAAA,EAAA,KAAA;CAAAC,IAAAA,KAAA,EAED,SAAAU,GAAAA,CAAIR,IAAI,EAAEwB,QAAQ,EAAE;CAChB,MAAA,IAAMrB,CAAC,GAAG,IAAI,CAACA,CAAC,KAAK,IAAI,CAACA,CAAC,GAAG,EAAE,CAAC,CAAA;OAEjC,IAAI,CAACH,IAAI,EAAE;SACPyB,MAAM,CAACC,IAAI,CAACvB,CAAC,CAAC,CAACwB,OAAO,CAAC,UAAC9B,GAAG,EAAK;WAC5B,OAAOM,CAAC,CAACN,GAAG,CAAC,CAAA;CACjB,SAAC,CAAC,CAAA;SACF,OAAO,IAAI,CAACM,CAAC,CAAA;CACb,QAAA,OAAA;CACJ,OAAA;CAEA,MAAA,IAAMyB,IAAI,GAAGzB,CAAC,CAACH,IAAI,CAAC,CAAA;OACpB,IAAM6B,UAAU,GAAG,EAAE,CAAA;OACrB,IAAID,IAAI,IAAIJ,QAAQ,EAAE;CAClB,QAAA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEO,GAAG,GAAGF,IAAI,CAACjB,MAAM,EAAEY,CAAC,GAAGO,GAAG,EAAEP,CAAC,IAAI,CAAC,EAAE;CAChD,UAAA,IAAIK,IAAI,CAACL,CAAC,CAAC,CAACtB,EAAE,KAAKuB,QAAQ,IAAII,IAAI,CAACL,CAAC,CAAC,CAACtB,EAAE,CAACe,CAAC,KAAKQ,QAAQ,EAAEK,UAAU,CAACzB,IAAI,CAACwB,IAAI,CAACL,CAAC,CAAC,CAAC,CAAA;CACtF,SAAA;CACJ,OAAA;OACA,IAAIM,UAAU,CAAClB,MAAM,EAAE;CACnBR,QAAAA,CAAC,CAACH,IAAI,CAAC,GAAG6B,UAAU,CAAA;CACxB,OAAC,MAAM;SACH,OAAO1B,CAAC,CAACH,IAAI,CAAC,CAAA;CAClB,OAAA;CACA,MAAA,OAAO,IAAI,CAAA;CACf,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAAN,OAAA,CAAA;CAAA,CAAA,EAAA;;;;CCjDL,IAAMqC,eAAe,GAAG;CACpBC,EAAAA,IAAI,EAAE,MAAM;CAAC;CACbC,EAAAA,MAAM,EAAE,QAAQ;CAAC;GACjBC,IAAI,EAAE,MAAM;CAChB,CAAC,CAAA;;CAED,IAAMC,YAAY,GAAG;CACjBC,EAAAA,KAAK,EAAE,CAAC;CAAE;CACVC,EAAAA,KAAK,EAAE,CAAC;CAAE;GACVC,MAAM,EAAE,EAAE;CACd,CAAC,CAAA;;CACD,IAAMC,iBAAiB,GAAG;CACtB,EAAA,CAAC,EAAE,OAAO;CAAE;CACZ,EAAA,CAAC,EAAE,OAAO;CAAE;GACZ,EAAE,EAAE,QAAQ;CAChB,CAAC,CAAA;;CAGD,IAAMC,QAAQ,GAAG;CACbC,EAAAA,IAAI,EAAE,CAAC;CAAE;GACTC,IAAI,EAAE,EAAE;CACZ,CAAC,CAAA;;CACD,IAAMC,aAAa,GAAG;CAClB,EAAA,CAAC,EAAE,MAAM;CAAE;GACX,EAAE,EAAE,MAAM;CACd,CAAC,CAAA;;CAGD,IAAMC,QAAQ,GAAG;CACbC,EAAAA,KAAK,EAAE,CAAC;CAAE;CACVC,EAAAA,KAAK,EAAE,CAAC;CAAE;GACVC,GAAG,EAAE,EAAE;CACX,CAAC,CAAA;;CAED,IAAMC,eAAe,GAAG;CACpBC,EAAAA,cAAc,EAAE,CAAC;CAAC;GAClBC,GAAG,EAAE,CAAC;CACV,CAAC,CAAA;;CAED,IAAMC,gBAAgB,GAAG;CACrBC,EAAAA,QAAQ,EAAE,CAAC;CAAC;GACZC,UAAU,EAAE,CAAC;CACjB,CAAC,CAAA;;CAED,IAAMC,iBAAiB,GAAG;CACtBL,EAAAA,cAAc,EAAE,CAAC;CAAE;GACnBM,IAAI,EAAE,CAAC;CACX,CAAC,CAAA;CAAA,IAGKC,UAAU,0BAAAC,QAAA,EAAA;GAAAC,SAAA,CAAAF,UAAA,EAAAC,QAAA,CAAA,CAAA;CAAA,EAAA,IAAAE,MAAA,GAAAC,cAAA,CAAAJ,UAAA,CAAA,CAAA;CACZ,EAAA,SAAAA,aAAc;CAAA,IAAA,IAAAK,KAAA,CAAA;CAAAlE,IAAAA,eAAA,OAAA6D,UAAA,CAAA,CAAA;KACVK,KAAA,GAAAF,MAAA,CAAAG,IAAA,CAAA,IAAA,CAAA,CAAA;KACAD,KAAA,CAAKE,UAAU,GAAG,IAAI,CAAA;CACtB;KACAF,KAAA,CAAKG,OAAO,GAAG,CAAC,CAAA;CAChBH,IAAAA,KAAA,CAAKI,KAAK,GAAGlC,eAAe,CAACC,IAAI,CAAA;CAAC,IAAA,OAAA6B,KAAA,CAAA;CACtC,GAAA;CAACjE,EAAAA,YAAA,CAAA4D,UAAA,EAAA,CAAA;KAAA3D,GAAA,EAAA,SAAA;KAAAC,KAAA,EAED,SAAAoE,OAAAA,GAAU;OACN,IAAI,CAACC,KAAK,EAAE,CAAA;CAChB,KAAA;CAAC,GAAA,EAAA;KAAAtE,GAAA,EAAA,OAAA;KAAAC,KAAA,EAED,SAAAqE,KAAAA,GAAQ;OACJ,IAAI,CAACJ,UAAU,GAAG,IAAI,CAAA;OACtB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAA;CAChB,MAAA,IAAI,CAACC,KAAK,GAAGlC,eAAe,CAACC,IAAI,CAAA;CACrC,KAAA;CAAC,GAAA,EAAA;KAAAnC,GAAA,EAAA,aAAA;CAAAC,IAAAA,KAAA,EAED,SAAAsE,WAAY/C,CAAAA,IAAI,EAAE;CACd;OACA,IAAIgD,MAAM,GAAGhD,IAAI,CAAA;;CAEjB;OACA,IAAI,IAAI,CAAC0C,UAAU,EAAE;CACjB,QAAA,IAAIO,SAAS,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACR,UAAU,CAACpD,MAAM,GAAGU,IAAI,CAACV,MAAM,CAAC,CAAA;SACpE2D,SAAS,CAACE,GAAG,CAAC,IAAI,CAACT,UAAU,EAAE,CAAC,CAAC,CAAA;SACjCO,SAAS,CAACE,GAAG,CAACnD,IAAI,EAAE,IAAI,CAAC0C,UAAU,CAACpD,MAAM,CAAC,CAAA;CAC3C0D,QAAAA,MAAM,GAAGC,SAAS,CAAA;SAClB,IAAI,CAACP,UAAU,GAAGU,SAAS,CAAA;CAC/B,OAAA;CACA;CACA,MAAA,IAAMC,GAAG,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAA;CAC9B,MAAA,IAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAAC,CAAA;CAE5B,MAAA,IAAII,OAAO,CAAA;CACX,MAAA,IAAIC,GAAG,CAAA;CACP,MAAA,IAAIC,GAAG,CAAA;CACP;CACA,MAAA,OAAO,IAAI,EAAE;CAET,QAAA,IAAIX,MAAM,CAAC1D,MAAM,GAAG,IAAI,CAACqD,OAAO,EAAE;CAC9BiB,UAAAA,OAAO,CAACC,GAAG,CAAAC,gCAAAA,CAAAA,MAAA,CAAkCd,MAAM,CAAC1D,MAAM,EAAA,KAAA,CAAA,CAAAwE,MAAA,CAAM,IAAI,CAACnB,OAAO,CAAG,CAAA,CAAA;CAC/E,UAAA,MAAA;CACJ,SAAA;;CAEA;CACA,QAAA,IAAI,IAAI,CAACC,KAAK,KAAKlC,eAAe,CAACC,IAAI,EAAE;CACrC;WACA,IAAIoD,SAAS,GAAGf,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC7CiB,UAAAA,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEE,SAAS,CAAC,CAAA;CACrC;CACA,UAAA,IAAMC,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,CAAA;CACtB,UAAA,IAAME,CAAC,GAAGF,SAAS,CAAC,CAAC,CAAC,CAAA;CACtB,UAAA,IAAMG,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC,CAAA;CACtB;CACA,UAAA,IAAMI,OAAO,GAAGJ,SAAS,CAAC,CAAC,CAAC,CAAA;WAC5BH,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEG,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAA;CAC3BN,UAAAA,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEM,OAAO,CAAC,CAAA;CACjC;CACA,UAAA,IAAIC,QAAQ,GAAI,CAACL,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,KAAM,CAAC,CAAA;WAC/C,IAAIM,QAAQ,GAAG,CAACN,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;CACvCH,UAAAA,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,QAAQ,CAAC,CAAA;CACnCR,UAAAA,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEQ,QAAQ,CAAC,CAAA;CACnC;WACAT,OAAO,CAACC,GAAG,CAAAC,0CAAAA,CAAAA,MAAA,CAA4C,IAAI,CAACnB,OAAO,EAAqE,oEAAA,CAAA,CAAA,CAAA;CACxI;WACAK,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;CACnC;WACA,IAAI,CAACA,OAAO,GAAG,EAAE,CAAA;CACjB;CACA,UAAA,IAAI,CAACC,KAAK,GAAGlC,eAAe,CAACE,MAAM,CAAA;UACtC,MAAM,IAAI,IAAI,CAACgC,KAAK,KAAKlC,eAAe,CAACE,MAAM,EAAE;CAC9C;WACA6C,OAAO,GAAGT,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;WAC3BY,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAE3C,iBAAiB,CAACuC,OAAO,CAAC,CAAC,CAAA;CACzE;WACAF,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;CACzBO,UAAAA,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;WAEjB,IAAMC,UAAU,GAAGhB,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;CACzC;WACAjB,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;WAC1BO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;CACzB;WACAO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;WAE1BU,GAAG,GAAGH,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;WAE3BZ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAClB,OAAO,CAAC,CAAA;CACvC;WACmBK,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,EAAC;CAChD;WACAK,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;CACnC;WACA,IAAI,CAACA,OAAO,GAAG4B,UAAU,CAAA;CACzBX,UAAAA,OAAO,CAACC,GAAG,CAAA,gBAAA,CAAAC,MAAA,CAAkBS,UAAU,EAAoC,mCAAA,CAAA,CAAA,CAAA;CAC3E,UAAA,IAAI,CAAC3B,KAAK,GAAGlC,eAAe,CAACG,IAAI,CAAA;CACrC,SAAC,MAAM;CACH;CACA,UAAA,IAAI4C,OAAO,KAAK3C,YAAY,CAACE,KAAK,EAAE;CAChC;aACA,IAAIyD,SAAS,GAAIzB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI,CAAA;CACvC;CACA,YAAA,IAAI0B,OAAO,GAAI1B,MAAM,CAAC,CAAC,CAAC,GAAI,IAAI,CAAA;aAEhC,IAAI0B,OAAO,KAAKvD,QAAQ,CAACC,IAAI,IAAIsD,OAAO,KAAKvD,QAAQ,CAACE,IAAI,EAAE;CAExD;CACA,cAAA,IAAMsD,UAAU,GAAG3B,MAAM,CAAC,CAAC,CAAC,CAAA;eAC5BY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEY,SAAS,EAAEE,UAAU,CAAC,CAAA;;CAE1D;eACApB,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;eACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;eACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;CACzBO,cAAAA,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;eAEjB,IAAIM,eAAe,GAAGrB,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;eAC3Cb,GAAG,GAAGD,GAAG,GAAGkB,eAAe,CAAA;CAE3B,cAAA,IAAIH,SAAS,KAAK3C,gBAAgB,CAACC,QAAQ,EAAE;CAEzC,gBAAA,IAAI4C,UAAU,KAAK1C,iBAAiB,CAACL,cAAc,EAAE;mBACjDgC,OAAO,CAACC,GAAG,CAAAC,EAAAA,CAAAA,MAAA,CAAIxC,aAAa,CAACoD,OAAO,CAAC,EAA2B,0BAAA,CAAA,CAAA,CAAA;mBACjD1B,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,EAAC;;CAE5C;CACA;mBACA,IAAMkC,SAAS,GAAG7B,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC/C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,gBAAgB,EAAE;CACxB8E,oBAAAA,OAAO,EAAPA,OAAO;CACPG,oBAAAA,SAAS,EAATA,SAAAA;CACJ,mBAAC,CAAC,CAAA;CACN,iBAAC,MAAM,IAAIF,UAAU,KAAK1C,iBAAiB,CAACC,IAAI,EAAE;CAC9C0B,kBAAAA,OAAO,CAACkB,IAAI,CAAA,EAAA,CAAAhB,MAAA,CAAIxC,aAAa,CAACoD,OAAO,CAAC,EAAA,uBAAA,CAAA,CAAAZ,MAAA,CAAwBJ,GAAG,aAAAI,MAAA,CAAUH,GAAG,CAAG,CAAA,CAAA;CACjF;mBACA,IAAMzB,IAAI,GAAGc,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC1C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,WAAW,EAAE;CACnBsC,oBAAAA,IAAI,EAAJA,IAAI;CACJ6C,oBAAAA,SAAS,EAAErB,GAAG;CACdsB,oBAAAA,UAAU,EAAE,IAAA;CAChB,mBAAC,CAAC,CAAA;CACN,iBAAC,MAAM;CACHpB,kBAAAA,OAAO,CAACkB,IAAI,CAAC,wBAAwB,EAAEH,UAAU,CAAC,CAAA;CACtD,iBAAA;CAEJ,eAAC,MAAM,IAAIF,SAAS,KAAK3C,gBAAgB,CAACE,UAAU,EAAE;CAClD,gBAAA,IAAI2C,UAAU,KAAK1C,iBAAiB,CAACC,IAAI,EAAE;CACvC0B,kBAAAA,OAAO,CAACC,GAAG,CAAA,EAAA,CAAAC,MAAA,CAAIxC,aAAa,CAACoD,OAAO,CAAC,EAAA,yBAAA,CAAA,CAAAZ,MAAA,CAA0BJ,GAAG,aAAAI,MAAA,CAAUH,GAAG,CAAG,CAAA,CAAA;CAClF;CACA;mBACA,IAAMzB,KAAI,GAAGc,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC1C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,WAAW,EAAE;CACnBsC,oBAAAA,IAAI,EAAJA,KAAI;CACJ6C,oBAAAA,SAAS,EAAErB,GAAG;CACdsB,oBAAAA,UAAU,EAAE,KAAA;CAChB,mBAAC,CAAC,CAAA;CACN,iBAAA;CACJ,eAAC,MAAM;CACHpB,gBAAAA,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,SAAS,CAAC,CAAA;CAC9C,eAAA;CACJ,aAAA;CAEJ,WAAC,MAAM,IAAIhB,OAAO,KAAK3C,YAAY,CAACC,KAAK,EAAE;CACvC;aACA,IAAIkE,OAAO,GAAIjC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAI,IAAI,CAAA;aACpBA,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,KAAI;aAClBA,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,KAAI;CACnC,YAAiBA,MAAM,CAAC,CAAC,CAAC,GAAE,KAAI;CAEhC,YAAA,IAAIiC,OAAO,KAAK1D,QAAQ,CAACG,GAAG,EAAE;CAC1B;CACA;CACA;CACA;CACA,cAAA,IAAMiD,WAAU,GAAG3B,MAAM,CAAC,CAAC,CAAC,CAAA;CAC5B,cAAA,IAAI2B,WAAU,KAAKhD,eAAe,CAACC,cAAc,EAAE;iBAChCoB,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,EAAC;iBAC5C,IAAMuC,iBAAiB,GAAGlC,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CACvDiB,gBAAAA,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAA;CAClC,gBAAA,IAAI,CAACjE,IAAI,CAAC,gBAAgB,EAAE;CACxB8E,kBAAAA,OAAO,EAAEO,OAAO;CAChBE,kBAAAA,IAAI,EAAE,KAAK;CACXN,kBAAAA,SAAS,EAAEK,iBAAAA;CACf,iBAAC,CAAC,CAAA;CACN,eAAC,MAAM;CACH;iBACA,IAAME,MAAM,GAAGpC,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC5CiB,gBAAAA,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC,CAAA;CACtB,gBAAA,IAAI,CAACjE,IAAI,CAAC,WAAW,EAAE;CACnBuF,kBAAAA,IAAI,EAAE,KAAK;CACXJ,kBAAAA,SAAS,EAAErB,GAAG;CACd1D,kBAAAA,IAAI,EAAEoF,MAAAA;CACV,iBAAC,CAAC,CAAA;CACN,eAAA;CACJ,aAAC,MAAM;eACH,IAAMD,IAAI,GAAGF,OAAO,KAAK1D,QAAQ,CAACC,KAAK,GAAG,OAAO,GAAG,OAAO,CAAA;CAC3D,cAAA,IAAI,CAAC5B,IAAI,CAAC,gBAAgB,EAAE;CACxBuF,gBAAAA,IAAI,EAAJA,IAAI;CACJN,gBAAAA,SAAS,EAAE,IAAI3B,UAAU,CAAC,CAAC,CAAA;CAC/B,eAAC,CAAC,CAAA;CACF;CACA;eACA,IAAMmC,OAAO,GAAGrC,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC7CiB,cAAAA,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,CAAA;CACvB,cAAA,IAAI,CAACjE,IAAI,CAAC,WAAW,EAAE;CACnBuF,gBAAAA,IAAI,EAAJA,IAAI;CACJJ,gBAAAA,SAAS,EAAErB,GAAG;CACd1D,gBAAAA,IAAI,EAAEqF,OAAAA;CACV,eAAC,CAAC,CAAA;CACN,aAAA;CAEJ,WAAC,MAAM,IAAI5B,OAAO,KAAK3C,YAAY,CAACG,MAAM,EAAE;CACxC2C,YAAAA,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC,CAAA;CAC7B,WAAC,MAAM;CACHD,YAAAA,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,OAAO,CAAC,CAAA;CAC1C,WAAA;CACA;WACAT,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;CACnC;WACA,IAAI,CAACA,OAAO,GAAG,EAAE,CAAA;CACjB,UAAA,IAAI,CAACC,KAAK,GAAGlC,eAAe,CAACE,MAAM,CAAA;CACvC,SAAA;CACJ,OAAA;OAEA,IAAI,CAAC8B,UAAU,GAAGM,MAAM,CAAA;CAC5B,KAAA;CAAC,GAAA,EAAA;KAAAxE,GAAA,EAAA,UAAA;CAAAC,IAAAA,KAAA,EAGD,SAAA6G,QAAStF,CAAAA,IAAI,EAAE;OAEX,IAAIgD,MAAM,GAAGhD,IAAI,CAAA;OAEjB,IAAI,IAAI,CAAC0C,UAAU,EAAE;CAEjB,QAAA,IAAI6C,SAAS,GAAG,IAAIrC,UAAU,CAAC,IAAI,CAACR,UAAU,CAACpD,MAAM,GAAGU,IAAI,CAACV,MAAM,CAAC,CAAA;SACpEiG,SAAS,CAACpC,GAAG,CAAC,IAAI,CAACT,UAAU,EAAE,CAAC,CAAC,CAAA;SACjC6C,SAAS,CAACpC,GAAG,CAACnD,IAAI,EAAE,IAAI,CAAC0C,UAAU,CAACpD,MAAM,CAAC,CAAA;CAE3C0D,QAAAA,MAAM,GAAGuC,SAAS,CAAA;SAClB,IAAI,CAAC7C,UAAU,GAAGU,SAAS,CAAA;CAC/B,OAAA;CAEA,MAAA,IAAMC,GAAG,GAAG,IAAIC,WAAW,CAAC,CAAC,CAAC,CAAA;CAC9B,MAAA,IAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAAC,CAAA;CAE5B,MAAA,OAAM,IAAI,EAAE;CAER,QAAA,IAAIL,MAAM,CAAC1D,MAAM,GAAG,IAAI,CAACqD,OAAO,EAAE;CAE9B,UAAA,MAAA;CACJ,SAAA;CAEA,QAAA,IAAI,IAAI,CAACC,KAAK,KAAKlC,eAAe,CAACC,IAAI,EAAE;WAErBqC,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,EAAC;WAC7CK,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;WAEnC,IAAI,CAACA,OAAO,GAAG,EAAE,CAAA;CACjB,UAAA,IAAI,CAACC,KAAK,GAAGlC,eAAe,CAACE,MAAM,CAAA;UAEtC,MAAM,IAAI,IAAI,CAACgC,KAAK,KAAKlC,eAAe,CAACE,MAAM,EAAE;WAE9C,IAAI,CAAC4E,QAAQ,GAAGxC,MAAM,CAAC,CAAC,CAAC,GAAC,IAAI,CAAC;;WAE/BO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;CACzBO,UAAAA,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;WAEjB,IAAImB,UAAU,GAAGlC,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;;WAEvCjB,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;WAC1BO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;WACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;WAE1B,IAAI,CAAC0C,IAAI,GAAGnC,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;WAEXxB,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,EAAC;WACnDK,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;WAEnC,IAAI,CAACA,OAAO,GAAG8C,UAAU,CAAA;CACzB,UAAA,IAAI,CAAC7C,KAAK,GAAGlC,eAAe,CAACG,IAAI,CAAA;CAErC,SAAC,MAAM;CAEH,UAAA,IAAI,IAAI,CAAC2E,QAAQ,KAAK1E,YAAY,CAACE,KAAK,EAAE;aAEtC,IAAI2E,SAAS,GAAI3C,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,IAAI,CAAA;CACnC,YAAA,IAAI4C,OAAO,GAAI5C,MAAM,CAAC,CAAC,CAAC,GAAE,IAAI,CAAA;aAE9B,IAAI4C,OAAO,KAAKzE,QAAQ,CAACC,IAAI,IAAIwE,OAAO,KAAKzE,QAAQ,CAACE,IAAI,EAAE;CAExD,cAAA,IAAIwE,aAAa,GAAG7C,MAAM,CAAC,CAAC,CAAC,CAAA;eAC7BY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE8B,SAAS,EAAEE,aAAa,CAAC,CAAA;eAE7DtC,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;eACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;eACzBO,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAEtB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAA;CACzBO,cAAAA,EAAE,CAACe,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;eAEjB,IAAIwB,eAAe,GAAGvC,EAAE,CAACiB,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;CAC3C,cAAA,IAAI,CAACuB,IAAI,GAAG,IAAI,CAACL,IAAI,GAAGI,eAAe,CAAA;CAEvC,cAAA,IAAIH,SAAS,KAAK7D,gBAAgB,CAACC,QAAQ,EAAE;CAEzC,gBAAA,IAAI8D,aAAa,KAAK5D,iBAAiB,CAACL,cAAc,EAAE;mBACpDgC,OAAO,CAACC,GAAG,CAA2B,yBAAA,CAAA,CAAA;;CAEtC;CACA;;CAGA;CACA;CACA;CACA;mBACA,IAAMgB,SAAS,GAAG7B,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAE/C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,gBAAgB,EAAE;CACxB8E,oBAAAA,OAAO,EAACkB,OAAO;CACff,oBAAAA,SAAS,EAATA,SAAAA;CACJ,mBAAC,CAAC,CAAA;CACN,iBAAC,MAAM,IAAIgB,aAAa,KAAK5D,iBAAiB,CAACC,IAAI,EAAE;mBACjD0B,OAAO,CAACkB,IAAI,CAAAhB,sBAAAA,CAAAA,MAAA,CAAwB,IAAI,CAAC4B,IAAI,CAAG,CAAA,CAAA;;CAEhD;mBACA,IAAIM,MAAM,GAAGhD,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAG1C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,WAAW,EAAE;CACnBsC,oBAAAA,IAAI,EAAC8D,MAAM;qBACXjB,SAAS,EAAE,IAAI,CAACW,IAAI;CACpBV,oBAAAA,UAAU,EAAE,IAAA;CAChB,mBAAC,CAAC,CAAA;CAEN,iBAAC,MAAM,CAGP;CAGJ,eAAC,MAAM,IAAIW,SAAS,KAAK7D,gBAAgB,CAACE,UAAU,EAAE;CAElD,gBAAA,IAAI6D,aAAa,KAAK5D,iBAAiB,CAACC,IAAI,EAAE;mBAC1C0B,OAAO,CAACC,GAAG,CAAAC,wBAAAA,CAAAA,MAAA,CAA0B,IAAI,CAAC4B,IAAI,CAAG,CAAA,CAAA;CACjD;mBACA,IAAIM,OAAM,GAAGhD,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAG1C,kBAAA,IAAI,CAAC/C,IAAI,CAAC,WAAW,EAAE;CACnBsC,oBAAAA,IAAI,EAAC8D,OAAM;qBACXjB,SAAS,EAAE,IAAI,CAACW,IAAI;CACpBV,oBAAAA,UAAU,EAAE,KAAA;CAChB,mBAAC,CAAC,CAAA;CAEN,iBAGA;CAEJ,eAAC,MAAM,CAGP;CAGJ,aAAA;YAEH,MAAM,IAAI,IAAI,CAACQ,QAAQ,KAAK1E,YAAY,CAACC,KAAK,EAAE;aAE7C,IAAIkF,WAAW,GAAIjD,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,IAAI,CAAA;aACpBA,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,KAAI;aAClBA,MAAM,CAAC,CAAC,CAAC,IAAE,CAAC,GAAE,KAAI;CACnC,YAAiBA,MAAM,CAAC,CAAC,CAAC,GAAE,KAAI;CAEhC,YAAA,IAAIiD,WAAW,KAAK1E,QAAQ,CAACG,GAAG,EAAE;CAE9B,cAAA,IAAIwE,aAAa,GAAGlD,MAAM,CAAC,CAAC,CAAC,CAAA;CAE7B,cAAA,IAAIkD,aAAa,KAAKvE,eAAe,CAACC,cAAc,EAAE;CAElD;;CAGA;CACA;CACA;CACA;CACA;CACA;iBACA,IAAMsD,iBAAiB,GAAGlC,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAEvD,gBAAA,IAAI,CAAC/C,IAAI,CAAC,gBAAgB,EAAE;CACxB8E,kBAAAA,OAAO,EAAEuB,WAAW;CACpBd,kBAAAA,IAAI,EAAE,KAAK;CACXN,kBAAAA,SAAS,EAAEK,iBAAAA;CACf,iBAAC,CAAC,CAAA;CAEN,eAAC,MAAM;iBAEH,IAAIiB,MAAM,GAAGnD,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;;CAE1C;CACA;CACA;CACA;CACA;;CAEA,gBAAA,IAAI,CAAC/C,IAAI,CAAC,WAAW,EAAE;CACnBuF,kBAAAA,IAAI,EAAE,KAAK;mBACXJ,SAAS,EAAE,IAAI,CAACW,IAAI;CACpB1F,kBAAAA,IAAI,EAAEmG,MAAAA;CACV,iBAAC,CAAC,CAAA;CACN,eAAA;CAEJ,aAAC,MAAM;eAEH,IAAIC,QAAQ,GAAGpD,MAAM,CAAClD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC6C,OAAO,CAAC,CAAA;CAC5C,cAAA,IAAI,CAAC/C,IAAI,CAAC,gBAAgB,EAAE;CACxBuF,gBAAAA,IAAI,EAAJA,IAAI;CACJN,gBAAAA,SAAS,EAAE,IAAI3B,UAAU,CAAC,CAAC,CAAA;CAC/B,eAAC,CAAC,CAAA;eACF,IAAMiC,IAAI,GAAGc,WAAW,KAAK1E,QAAQ,CAACC,KAAK,GAAG,OAAO,GAAG,OAAO,CAAA;CAG/D,cAAA,IAAI,CAAC5B,IAAI,CAAC,WAAW,EAAE;CACnBuF,gBAAAA,IAAI,EAAJA,IAAI;iBACJJ,SAAS,EAAE,IAAI,CAACW,IAAI;CACpB1F,gBAAAA,IAAI,EAAEoG,QAAAA;CACV,eAAC,CAAC,CAAA;CACN,aAAA;CAEJ,WAAC,MAAM,IAAI,IAAI,CAACZ,QAAQ,KAAK1E,YAAY,CAACG,MAAM,EAAE,CAGjD,MAAM,CAGP;WAEA+B,MAAM,GAAGA,MAAM,CAAClD,KAAK,CAAC,IAAI,CAAC6C,OAAO,CAAC,CAAA;WAEnC,IAAI,CAACA,OAAO,GAAG,EAAE,CAAA;CACjB,UAAA,IAAI,CAACC,KAAK,GAAGlC,eAAe,CAACE,MAAM,CAAA;CACvC,SAAA;CAEJ,OAAA;OAEA,IAAI,CAAC8B,UAAU,GAAGM,MAAM,CAAA;CAG5B,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAAb,UAAA,CAAA;CAAA,CAAA,CAzcoB9D,OAAO,CAAA;;CCpDhC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CAGA;CAAA,IACMgI,SAAS,gBAAA,YAAA;GAEX,SAAAA,SAAAA,CAAYC,UAAU,EAAE;CAAAhI,IAAAA,eAAA,OAAA+H,SAAA,CAAA,CAAA;KACpB,IAAI,CAACE,GAAG,GAAG,WAAW,CAAA;KAEtB,IAAI,CAACC,OAAO,GAAGF,UAAU,CAAA;KACzB,IAAI,CAACG,aAAa,GAAG,CAAC,CAAA;CACtB,IAAA,IAAI,CAACC,YAAY,GAAGJ,UAAU,CAACK,UAAU,CAAA;CACzC,IAAA,IAAI,CAACC,WAAW,GAAGN,UAAU,CAACK,UAAU,GAAG,CAAC,CAAA;KAC5C,IAAI,CAACE,aAAa,GAAG,CAAC,CAAA;KACtB,IAAI,CAACC,uBAAuB,GAAG,CAAC,CAAA;CACpC,GAAA;CAACvI,EAAAA,YAAA,CAAA8H,SAAA,EAAA,CAAA;KAAA7H,GAAA,EAAA,SAAA;KAAAC,KAAA,EAED,SAAAoE,OAAAA,GAAU;OACN,IAAI,CAAC2D,OAAO,GAAG,IAAI,CAAA;CACvB,KAAA;CAAC,GAAA,EAAA;KAAAhI,GAAA,EAAA,kBAAA;KAAAC,KAAA,EAED,SAAAsI,gBAAAA,GAAmB;OACf,IAAIC,iBAAiB,GAAG,IAAI,CAACN,YAAY,GAAG,IAAI,CAACD,aAAa,CAAA;OAK9D,IAAIQ,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,iBAAiB,CAAC,CAAA;CAC/C,MAAA,IAAII,IAAI,GAAG,IAAIlE,UAAU,CAAC,CAAC,CAAC,CAAA;CAC5BkE,MAAAA,IAAI,CAACjE,GAAG,CAAC,IAAI,CAACqD,OAAO,CAACa,QAAQ,CAAC,IAAI,CAACZ,aAAa,EAAE,IAAI,CAACA,aAAa,GAAGQ,UAAU,CAAC,CAAC,CAAA;CACpF,MAAA,IAAI,CAACJ,aAAa,GAAG,IAAIrD,QAAQ,CAAC4D,IAAI,CAACE,MAAM,CAAC,CAAC9C,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;OAElE,IAAI,CAACiC,aAAa,IAAIQ,UAAU,CAAA;CAChC,MAAA,IAAI,CAACH,uBAAuB,GAAGG,UAAU,GAAG,CAAC,CAAA;CACjD,KAAA;CAAC,GAAA,EAAA;KAAAzI,GAAA,EAAA,UAAA;CAAAC,IAAAA,KAAA,EAED,SAAA8I,QAASC,CAAAA,IAAI,EAAE;CAKX,MAAA,IAAIA,IAAI,IAAI,IAAI,CAACV,uBAAuB,EAAE;SACtC,IAAIW,OAAM,GAAG,IAAI,CAACZ,aAAa,KAAM,EAAE,GAAGW,IAAK,CAAA;SAC/C,IAAI,CAACX,aAAa,KAAKW,IAAI,CAAA;SAC3B,IAAI,CAACV,uBAAuB,IAAIU,IAAI,CAAA;CACpC,QAAA,OAAOC,OAAM,CAAA;CACjB,OAAA;OAEA,IAAIA,MAAM,GAAG,IAAI,CAACX,uBAAuB,GAAG,IAAI,CAACD,aAAa,GAAG,CAAC,CAAA;CAClEY,MAAAA,MAAM,GAAGA,MAAM,KAAM,EAAE,GAAG,IAAI,CAACX,uBAAwB,CAAA;CACvD,MAAA,IAAIY,cAAc,GAAGF,IAAI,GAAG,IAAI,CAACV,uBAAuB,CAAA;OAExD,IAAI,CAACC,gBAAgB,EAAE,CAAA;OACvB,IAAIY,cAAc,GAAGT,IAAI,CAACC,GAAG,CAACO,cAAc,EAAE,IAAI,CAACZ,uBAAuB,CAAC,CAAA;OAE3E,IAAIc,OAAO,GAAG,IAAI,CAACf,aAAa,KAAM,EAAE,GAAGc,cAAe,CAAA;OAC1D,IAAI,CAACd,aAAa,KAAKc,cAAc,CAAA;OACrC,IAAI,CAACb,uBAAuB,IAAIa,cAAc,CAAA;CAE9CF,MAAAA,MAAM,GAAIA,MAAM,IAAIE,cAAc,GAAIC,OAAO,CAAA;CAC7C,MAAA,OAAOH,MAAM,CAAA;CACjB,KAAA;CAAC,GAAA,EAAA;KAAAjJ,GAAA,EAAA,UAAA;KAAAC,KAAA,EAED,SAAAoJ,QAAAA,GAAW;CACP,MAAA,OAAO,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;CACjC,KAAA;CAAC,GAAA,EAAA;KAAA/I,GAAA,EAAA,UAAA;KAAAC,KAAA,EAED,SAAAqJ,QAAAA,GAAW;CACP,MAAA,OAAO,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAA;CAC3B,KAAA;CAAC,GAAA,EAAA;KAAA/I,GAAA,EAAA,kBAAA;KAAAC,KAAA,EAED,SAAAsJ,gBAAAA,GAAmB;CACf,MAAA,IAAIC,UAAU,CAAA;CACd,MAAA,KAAKA,UAAU,GAAG,CAAC,EAAEA,UAAU,GAAG,IAAI,CAAClB,uBAAuB,EAAEkB,UAAU,EAAE,EAAE;SAC1E,IAAI,CAAC,MAAM,IAAI,CAACnB,aAAa,GAAI,UAAU,KAAKmB,UAAW,CAAC,EAAE;WAC1D,IAAI,CAACnB,aAAa,KAAKmB,UAAU,CAAA;WACjC,IAAI,CAAClB,uBAAuB,IAAIkB,UAAU,CAAA;CAC1C,UAAA,OAAOA,UAAU,CAAA;CACrB,SAAA;CACJ,OAAA;OACA,IAAI,CAACjB,gBAAgB,EAAE,CAAA;CACvB,MAAA,OAAOiB,UAAU,GAAG,IAAI,CAACD,gBAAgB,EAAE,CAAA;CAC/C,KAAA;CAAC,GAAA,EAAA;KAAAvJ,GAAA,EAAA,SAAA;KAAAC,KAAA,EAED,SAAAwJ,OAAAA,GAAU;CAAG;CACT,MAAA,IAAIC,aAAa,GAAG,IAAI,CAACH,gBAAgB,EAAE,CAAA;OAC3C,OAAO,IAAI,CAACR,QAAQ,CAACW,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;CAC/C,KAAA;CAAC,GAAA,EAAA;KAAA1J,GAAA,EAAA,SAAA;KAAAC,KAAA,EAED,SAAA0J,OAAAA,GAAU;CAAG;CACT,MAAA,IAAI1J,KAAK,GAAG,IAAI,CAACwJ,OAAO,EAAE,CAAA;OAC1B,IAAIxJ,KAAK,GAAG,IAAI,EAAE;CACd,QAAA,OAAQA,KAAK,GAAG,CAAC,KAAM,CAAC,CAAA;CAC5B,OAAC,MAAM;CACH,QAAA,OAAO,CAAC,CAAC,IAAIA,KAAK,KAAK,CAAC,CAAC,CAAA;CAC7B,OAAA;CACJ,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAA4H,SAAA,CAAA;CAAA,CAAA,EAAA;;CC/GmC,IAElC+B,SAAS,gBAAA,YAAA;CAAA,EAAA,SAAAA,SAAA,GAAA;CAAA9J,IAAAA,eAAA,OAAA8J,SAAA,CAAA,CAAA;CAAA,GAAA;CAAA7J,EAAAA,YAAA,CAAA6J,SAAA,EAAA,IAAA,EAAA,CAAA;KAAA5J,GAAA,EAAA,YAAA;CAAAC,IAAAA,KAAA,EAEX,SAAA4J,UAAkB/B,CAAAA,UAAU,EAAE;OAC1B,IAAIgC,GAAG,GAAGhC,UAAU,CAAA;CACpB,MAAA,IAAIiC,UAAU,GAAGD,GAAG,CAAC3B,UAAU,CAAA;CAC/B,MAAA,IAAI6B,GAAG,GAAG,IAAItF,UAAU,CAACqF,UAAU,CAAC,CAAA;OACpC,IAAIE,OAAO,GAAG,CAAC,CAAA;OAEf,KAAK,IAAIvI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqI,UAAU,EAAErI,CAAC,EAAE,EAAE;SACjC,IAAIA,CAAC,IAAI,CAAC,EAAE;CACR;WACA,IAAIoI,GAAG,CAACpI,CAAC,CAAC,KAAK,IAAI,IAAIoI,GAAG,CAACpI,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IAAIoI,GAAG,CAACpI,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;CAC/D,YAAA,SAAA;CACJ,WAAA;CACJ,SAAA;CACAsI,QAAAA,GAAG,CAACC,OAAO,CAAC,GAAGH,GAAG,CAACpI,CAAC,CAAC,CAAA;CACrBuI,QAAAA,OAAO,EAAE,CAAA;CACb,OAAA;OAEA,OAAO,IAAIvF,UAAU,CAACsF,GAAG,CAAClB,MAAM,EAAE,CAAC,EAAEmB,OAAO,CAAC,CAAA;CACjD,KAAA;;CAEA;CACA;CAAA,GAAA,EAAA;KAAAjK,GAAA,EAAA,UAAA;CAAAC,IAAAA,KAAA,EACA,SAAAiK,QAAgBpC,CAAAA,UAAU,EAAE;CACxB,MAAA,IAAIqC,IAAI,GAAGP,SAAS,CAACC,UAAU,CAAC/B,UAAU,CAAC,CAAA;CAC3C,MAAA,IAAIsC,EAAE,GAAG,IAAIvC,SAAS,CAACsC,IAAI,CAAC,CAAA;OAE5BC,EAAE,CAACd,QAAQ,EAAE,CAAA;CACb;CACA;;CAEA,MAAA,IAAIe,WAAW,GAAGD,EAAE,CAACd,QAAQ,EAAE,CAAC;CAChCc,MAAAA,EAAE,CAACd,QAAQ,EAAE,CAAC;CACd;CACA,MAAA,IAAIgB,SAAS,GAAGF,EAAE,CAACd,QAAQ,EAAE,CAAC;CAC9B;CACAc,MAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;;CAEb,MAAA,IAAIc,cAAc,GAAGX,SAAS,CAACY,gBAAgB,CAACH,WAAW,CAAC,CAAA;CAE5D,MAAA,IAAII,YAAY,GAAGb,SAAS,CAACc,cAAc,CAACJ,SAAS,CAAC,CAAA;OAEtD,IAAIK,iBAAiB,GAAG,CAAC,CAAA;OACzB,IAAIC,aAAa,GAAG,GAAG,CAAA;OACvB,IAAIC,mBAAmB,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;OAC5C,IAAIC,SAAS,GAAG,CAAC,CAAA;;CAEjB;CACA,MAAA,IAAIT,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,GAAG,IACjEA,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,EAAE,IAAIA,WAAW,KAAK,EAAE,IAC/DA,WAAW,KAAK,EAAE,IAAIA,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,GAAG,IAChEA,WAAW,KAAK,GAAG,IAAIA,WAAW,KAAK,GAAG,EAAE;CAC5C;CACAM,QAAAA,iBAAiB,GAAGP,EAAE,CAACX,OAAO,EAAE,CAAA;SAEhC,IAAIkB,iBAAiB,KAAK,CAAC,EAAE;CACzBP,UAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACnB,SAAA;;SACA,IAAI4B,iBAAiB,IAAI,CAAC,EAAE;CACxBC,UAAAA,aAAa,GAAGC,mBAAmB,CAACF,iBAAiB,CAAC,CAAA;CAC1D,SAAA;SAEAG,SAAS,GAAGV,EAAE,CAACX,OAAO,EAAE,GAAG,CAAC,CAAC;CAC7BW,QAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;CACbW,QAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACf,QAAA,IAAIqB,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;WAClB,IAAI0B,kBAAkB,GAAIJ,iBAAiB,KAAK,CAAC,GAAI,CAAC,GAAG,EAAE,CAAA;WAC3D,KAAK,IAAIjJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqJ,kBAAkB,EAAErJ,CAAC,EAAE,EAAE;CACzC,YAAA,IAAI0I,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;eAClB,IAAI3H,CAAC,GAAG,CAAC,EAAE;CACPkI,gBAAAA,SAAS,CAACoB,gBAAgB,CAACZ,EAAE,EAAE,EAAE,CAAC,CAAA;CACtC,eAAC,MAAM;CACHR,gBAAAA,SAAS,CAACoB,gBAAgB,CAACZ,EAAE,EAAE,EAAE,CAAC,CAAA;CACtC,eAAA;CACJ,aAAA;CACJ,WAAA;CACJ,SAAA;CACJ,OAAA;CACA;CACAA,MAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;CACb;CACA,MAAA,IAAIwB,kBAAkB,GAAGb,EAAE,CAACX,OAAO,EAAE,CAAA;OACrC,IAAIwB,kBAAkB,KAAK,CAAC,EAAE;CAC1Bb,QAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;CACjB,OAAC,MAAM,IAAIwB,kBAAkB,KAAK,CAAC,EAAE;CACjCb,QAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACfqB,QAAAA,EAAE,CAACT,OAAO,EAAE,CAAC;CACbS,QAAAA,EAAE,CAACT,OAAO,EAAE,CAAC;CACb,QAAA,IAAIuB,qCAAqC,GAAGd,EAAE,CAACX,OAAO,EAAE,CAAA;SACxD,KAAK,IAAI/H,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGwJ,qCAAqC,EAAExJ,EAAC,EAAE,EAAE;CAC5D0I,UAAAA,EAAE,CAACT,OAAO,EAAE,CAAC;CACjB,SAAA;CACJ,OAAA;CACA;CACA,MAAA,IAAIwB,UAAU,GAAGf,EAAE,CAACX,OAAO,EAAE,CAAC;CAC9B;CACAW,MAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACf;CACA,MAAA,IAAIqC,uBAAuB,GAAGhB,EAAE,CAACX,OAAO,EAAE,CAAA;CAC1C;CACA;CACA,MAAA,IAAI4B,8BAA8B,GAAGjB,EAAE,CAACX,OAAO,EAAE,CAAA;CACjD;CACA;CACA;CACA,MAAA,IAAI6B,mBAAmB,GAAGlB,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAA;OACxC,IAAIuC,mBAAmB,KAAK,CAAC,EAAE;CAC3B;CACAlB,QAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACnB,OAAA;CACA;CACAqB,MAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;;OAEf,IAAIwC,sBAAsB,GAAG,CAAC,CAAA;OAC9B,IAAIC,uBAAuB,GAAG,CAAC,CAAA;OAC/B,IAAIC,qBAAqB,GAAG,CAAC,CAAA;OAC7B,IAAIC,wBAAwB,GAAG,CAAC,CAAA;CAEhC,MAAA,IAAIC,mBAAmB,GAAGvB,EAAE,CAACf,QAAQ,EAAE,CAAA;CACvC,MAAA,IAAIsC,mBAAmB,EAAE;CACrBJ,QAAAA,sBAAsB,GAAGnB,EAAE,CAACX,OAAO,EAAE,CAAA;CACrC+B,QAAAA,uBAAuB,GAAGpB,EAAE,CAACX,OAAO,EAAE,CAAA;CACtCgC,QAAAA,qBAAqB,GAAGrB,EAAE,CAACX,OAAO,EAAE,CAAA;CACpCiC,QAAAA,wBAAwB,GAAGtB,EAAE,CAACX,OAAO,EAAE,CAAA;CAC3C,OAAA;OAEA,IAAImC,SAAS,GAAG,CAAC;CAAEC,QAAAA,UAAU,GAAG,CAAC,CAAA;OACjC,IAAIC,GAAG,GAAG,CAAC;CAAEC,QAAAA,SAAS,GAAG,IAAI;CAAEC,QAAAA,OAAO,GAAG,CAAC;CAAEC,QAAAA,OAAO,GAAG,CAAC,CAAA;CACvD;CACA,MAAA,IAAIC,2BAA2B,GAAG9B,EAAE,CAACf,QAAQ,EAAE,CAAA;CAC/C,MAAA,IAAI6C,2BAA2B,EAAE;CAC7B,QAAA,IAAI9B,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClB,UAAA,IAAI8C,gBAAgB,GAAG/B,EAAE,CAACd,QAAQ,EAAE,CAAA;CACpC,UAAA,IAAI8C,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;CAC/E,UAAA,IAAIC,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;CAE/E,UAAA,IAAIF,gBAAgB,GAAG,CAAC,IAAIA,gBAAgB,GAAG,EAAE,EAAE;CAC/CP,YAAAA,SAAS,GAAGQ,WAAW,CAACD,gBAAgB,GAAG,CAAC,CAAC,CAAA;CAC7CN,YAAAA,UAAU,GAAGQ,WAAW,CAACF,gBAAgB,GAAG,CAAC,CAAC,CAAA;CAClD,WAAC,MAAM,IAAIA,gBAAgB,KAAK,GAAG,EAAE;aACjCP,SAAS,GAAGxB,EAAE,CAACd,QAAQ,EAAE,IAAI,CAAC,GAAGc,EAAE,CAACd,QAAQ,EAAE,CAAA;aAC9CuC,UAAU,GAAGzB,EAAE,CAACd,QAAQ,EAAE,IAAI,CAAC,GAAGc,EAAE,CAACd,QAAQ,EAAE,CAAA;CACnD,WAAA;CACJ,SAAA;CAEA,QAAA,IAAIc,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClBe,UAAAA,EAAE,CAACf,QAAQ,EAAE,CAAC;CAClB,SAAA;;CACA,QAAA,IAAIe,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClBe,UAAAA,EAAE,CAACrB,QAAQ,CAAC,CAAC,CAAC,CAAC;CACf,UAAA,IAAIqB,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClBe,YAAAA,EAAE,CAACrB,QAAQ,CAAC,EAAE,CAAC,CAAC;CACpB,WAAA;CACJ,SAAA;;CACA,QAAA,IAAIqB,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClBe,UAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;CACbW,UAAAA,EAAE,CAACX,OAAO,EAAE,CAAC;CACjB,SAAA;;CACA,QAAA,IAAIW,EAAE,CAACf,QAAQ,EAAE,EAAE;CAAG;CAClB,UAAA,IAAIiD,iBAAiB,GAAGlC,EAAE,CAACrB,QAAQ,CAAC,EAAE,CAAC,CAAA;CACvC,UAAA,IAAIwD,UAAU,GAAGnC,EAAE,CAACrB,QAAQ,CAAC,EAAE,CAAC,CAAA;CAChCgD,UAAAA,SAAS,GAAG3B,EAAE,CAACf,QAAQ,EAAE,CAAC;;CAE1B2C,UAAAA,OAAO,GAAGO,UAAU,CAAA;WACpBN,OAAO,GAAGK,iBAAiB,GAAG,CAAC,CAAA;WAC/BR,GAAG,GAAGE,OAAO,GAAGC,OAAO,CAAA;CAC3B,SAAA;CACJ,OAAA;OAEA,IAAIO,QAAQ,GAAG,CAAC,CAAA;CAChB,MAAA,IAAIZ,SAAS,KAAK,CAAC,IAAIC,UAAU,KAAK,CAAC,EAAE;SACrCW,QAAQ,GAAGZ,SAAS,GAAGC,UAAU,CAAA;CACrC,OAAA;OAEA,IAAIY,WAAW,GAAG,CAAC;CAAEC,QAAAA,WAAW,GAAG,CAAC,CAAA;OACpC,IAAI/B,iBAAiB,KAAK,CAAC,EAAE;CACzB8B,QAAAA,WAAW,GAAG,CAAC,CAAA;SACfC,WAAW,GAAG,CAAC,GAAGpB,mBAAmB,CAAA;CACzC,OAAC,MAAM;SACH,IAAIqB,MAAM,GAAIhC,iBAAiB,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC,CAAA;SAC9C,IAAIiC,MAAM,GAAIjC,iBAAiB,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC,CAAA;CAC9C8B,QAAAA,WAAW,GAAGE,MAAM,CAAA;CACpBD,QAAAA,WAAW,GAAGE,MAAM,IAAI,CAAC,GAAGtB,mBAAmB,CAAC,CAAA;CACpD,OAAA;CAEA,MAAA,IAAIuB,WAAW,GAAG,CAACzB,uBAAuB,GAAG,CAAC,IAAI,EAAE,CAAA;CACpD,MAAA,IAAI0B,YAAY,GAAG,CAAC,CAAC,GAAGxB,mBAAmB,KAAK,CAACD,8BAA8B,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;CAE1FwB,MAAAA,WAAW,IAAI,CAACtB,sBAAsB,GAAGC,uBAAuB,IAAIiB,WAAW,CAAA;CAC/EK,MAAAA,YAAY,IAAI,CAACrB,qBAAqB,GAAGC,wBAAwB,IAAIgB,WAAW,CAAA;OAEhF,IAAIK,aAAa,GAAGrE,IAAI,CAACsE,IAAI,CAACH,WAAW,GAAGL,QAAQ,CAAC,CAAA;OAErDpC,EAAE,CAAC/F,OAAO,EAAE,CAAA;CACZ+F,MAAAA,EAAE,GAAG,IAAI,CAAA;;CAGT;OACA,OAAO;CACHG,QAAAA,cAAc,EAAEA,cAAc;CAAG;CACjCE,QAAAA,YAAY,EAAEA,YAAY;CAAG;CAC7BK,QAAAA,SAAS,EAAEA,SAAS;CAAG;CACvBK,QAAAA,UAAU,EAAEA,UAAU;CACtBP,QAAAA,aAAa,EAAEA,aAAa;CAAG;CAC/BqC,QAAAA,oBAAoB,EAAErD,SAAS,CAACsD,qBAAqB,CAACtC,aAAa,CAAC;CAEpEuC,QAAAA,UAAU,EAAE;CACRC,UAAAA,KAAK,EAAErB,SAAS;CAChBD,UAAAA,GAAG,EAAEA,GAAG;CACRG,UAAAA,OAAO,EAAEA,OAAO;CAChBD,UAAAA,OAAO,EAAEA,OAAAA;UACZ;CAEDqB,QAAAA,SAAS,EAAE;CACPC,UAAAA,KAAK,EAAE1B,SAAS;CAChB2B,UAAAA,MAAM,EAAE1B,UAAAA;UACX;CAED2B,QAAAA,UAAU,EAAE;CACRF,UAAAA,KAAK,EAAET,WAAW;CAClBU,UAAAA,MAAM,EAAET,YAAAA;UACX;CAEDW,QAAAA,YAAY,EAAE;CACVH,UAAAA,KAAK,EAAEP,aAAa;CACpBQ,UAAAA,MAAM,EAAET,YAAAA;CACZ,SAAA;QACH,CAAA;CACL,KAAA;CAAC,GAAA,EAAA;KAAA9M,GAAA,EAAA,kBAAA;CAAAC,IAAAA,KAAA,EAED,SAAA+K,gBAAAA,CAAwBZ,EAAE,EAAEsD,KAAK,EAAE;OAC/B,IAAIC,UAAU,GAAG,CAAC;CAAEC,QAAAA,UAAU,GAAG,CAAC,CAAA;OAClC,IAAIC,WAAW,GAAG,CAAC,CAAA;OACnB,KAAK,IAAInM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgM,KAAK,EAAEhM,CAAC,EAAE,EAAE;SAC5B,IAAIkM,UAAU,KAAK,CAAC,EAAE;CAClBC,UAAAA,WAAW,GAAGzD,EAAE,CAACT,OAAO,EAAE,CAAA;WAC1BiE,UAAU,GAAG,CAACD,UAAU,GAAGE,WAAW,GAAG,GAAG,IAAI,GAAG,CAAA;CACvD,SAAA;CACAF,QAAAA,UAAU,GAAIC,UAAU,KAAK,CAAC,GAAID,UAAU,GAAGC,UAAU,CAAA;CAC7D,OAAA;CACJ,KAAA;;CAEA;CACA;CACA;CACA;CACA;CAAA,GAAA,EAAA;KAAA5N,GAAA,EAAA,kBAAA;CAAAC,IAAAA,KAAA,EACA,SAAAuK,gBAAwBH,CAAAA,WAAW,EAAE;CACjC,MAAA,QAAQA,WAAW;CACf,QAAA,KAAK,EAAE;CACH,UAAA,OAAO,UAAU,CAAA;CACrB,QAAA,KAAK,EAAE;CACH,UAAA,OAAO,MAAM,CAAA;CACjB,QAAA,KAAK,EAAE;CACH,UAAA,OAAO,UAAU,CAAA;CACrB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,MAAM,CAAA;CACjB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,QAAQ,CAAA;CACnB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,SAAS,CAAA;CACpB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,SAAS,CAAA;CACpB,QAAA;CACI,UAAA,OAAO,SAAS,CAAA;CAAC,OAAA;CAE7B,KAAA;CAAC,GAAA,EAAA;KAAArK,GAAA,EAAA,gBAAA;CAAAC,IAAAA,KAAA,EAED,SAAAyK,cAAsBJ,CAAAA,SAAS,EAAE;OAC7B,OAAO,CAACA,SAAS,GAAG,EAAE,EAAEwD,OAAO,CAAC,CAAC,CAAC,CAAA;CACtC,KAAA;CAAC,GAAA,EAAA;KAAA9N,GAAA,EAAA,uBAAA;CAAAC,IAAAA,KAAA,EAED,SAAAiN,qBAA6Ba,CAAAA,MAAM,EAAE;CACjC,MAAA,QAAQA,MAAM;CACV,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,OAAO,CAAA;CAClB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,OAAO,CAAA;CAClB,QAAA,KAAK,GAAG;CACJ,UAAA,OAAO,OAAO,CAAA;CAClB,QAAA;CACI,UAAA,OAAO,SAAS,CAAA;CAAC,OAAA;CAE7B,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAAnE,SAAA,CAAA;CAAA,CAAA,EAAA;;KC/RCoE,GAAG,gBAAA,YAAA;CAAA,EAAA,SAAAA,GAAA,GAAA;CAAAlO,IAAAA,eAAA,OAAAkO,GAAA,CAAA,CAAA;CAAA,GAAA;CAAAjO,EAAAA,YAAA,CAAAiO,GAAA,EAAA,IAAA,EAAA,CAAA;KAAAhO,GAAA,EAAA,MAAA;KAAAC,KAAA,EAEL,SAAAkC,IAAAA,GAAc;OACV6L,GAAG,CAACC,KAAK,GAAG;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAE;CACRC,QAAAA,IAAI,EAAE,EAAA;QACT,CAAA;CAED,MAAA,KAAK,IAAIlQ,IAAI,IAAI6N,GAAG,CAACC,KAAK,EAAE;SACxB,IAAID,GAAG,CAACC,KAAK,CAACqC,cAAc,CAACnQ,IAAI,CAAC,EAAE;CAChC6N,UAAAA,GAAG,CAACC,KAAK,CAAC9N,IAAI,CAAC,GAAG,CACdA,IAAI,CAACoQ,UAAU,CAAC,CAAC,CAAC,EAClBpQ,IAAI,CAACoQ,UAAU,CAAC,CAAC,CAAC,EAClBpQ,IAAI,CAACoQ,UAAU,CAAC,CAAC,CAAC,EAClBpQ,IAAI,CAACoQ,UAAU,CAAC,CAAC,CAAC,CACrB,CAAA;CACL,SAAA;CACJ,OAAA;CAEA,MAAA,IAAIC,SAAS,GAAGxC,GAAG,CAACwC,SAAS,GAAG,EAAE,CAAA;CAElCA,MAAAA,SAAS,CAACC,IAAI,GAAG,IAAI/L,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CAAI;CACtB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;CAEF8L,MAAAA,SAAS,CAACE,WAAW,GAAG,IAAIhM,UAAU,CAAC,CACnC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;CAEF8L,MAAAA,SAAS,CAACG,IAAI,GAAG,IAAIjM,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;OAEF8L,SAAS,CAACI,IAAI,GAAGJ,SAAS,CAACK,IAAI,GAAGL,SAAS,CAACG,IAAI,CAAA;CAEhDH,MAAAA,SAAS,CAACM,IAAI,GAAG,IAAIpM,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;CAEF8L,MAAAA,SAAS,CAACO,UAAU,GAAG,IAAIrM,UAAU,CAAC,CAClC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAE,OACjC,CAAC,CAAA;;CAEF8L,MAAAA,SAAS,CAACQ,UAAU,GAAG,IAAItM,UAAU,CAAC,CAClC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAE,OACjC,CAAC,CAAA;;CAEF8L,MAAAA,SAAS,CAACS,IAAI,GAAG,IAAIvM,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;CAEF;CACA8L,MAAAA,SAAS,CAACU,IAAI,GAAG,IAAIxM,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;CAEF;CACA8L,MAAAA,SAAS,CAACW,IAAI,GAAG,IAAIzM,UAAU,CAAC,CAC5B,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI;CAAe;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACzB,IAAI,EAAE,IAAI,CACb,CAAC,CAAA;CACN,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA1E,GAAA,EAAA,KAAA;CAAAC,IAAAA,KAAA,EACA,SAAAmR,GAAWzK,CAAAA,IAAI,EAAE;OACb,IAAI0K,IAAI,GAAG,CAAC,CAAA;OACZ,IAAIpI,MAAM,GAAG,IAAI,CAAA;CACjB,MAAA,IAAIqI,KAAK,GAAGtQ,KAAK,CAACuQ,SAAS,CAACjQ,KAAK,CAAC2C,IAAI,CAACpD,SAAS,EAAE,CAAC,CAAC,CAAA;CACpD,MAAA,IAAI2Q,UAAU,GAAGF,KAAK,CAACxQ,MAAM,CAAA;OAE7B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8P,UAAU,EAAE9P,CAAC,EAAE,EAAE;CACjC2P,QAAAA,IAAI,IAAIC,KAAK,CAAC5P,CAAC,CAAC,CAACyG,UAAU,CAAA;CAC/B,OAAA;CAEAc,MAAAA,MAAM,GAAG,IAAIvE,UAAU,CAAC2M,IAAI,CAAC,CAAA;OAC7BpI,MAAM,CAAC,CAAC,CAAC,GAAIoI,IAAI,KAAK,EAAE,GAAI,IAAI,CAAC;OACjCpI,MAAM,CAAC,CAAC,CAAC,GAAIoI,IAAI,KAAK,EAAE,GAAI,IAAI,CAAA;OAChCpI,MAAM,CAAC,CAAC,CAAC,GAAIoI,IAAI,KAAK,CAAC,GAAI,IAAI,CAAA;CAC/BpI,MAAAA,MAAM,CAAC,CAAC,CAAC,GAAIoI,IAAI,GAAI,IAAI,CAAA;OAEzBpI,MAAM,CAACtE,GAAG,CAACgC,IAAI,EAAE,CAAC,CAAC,CAAC;;OAEpB,IAAI8K,MAAM,GAAG,CAAC,CAAA;OACd,KAAK,IAAI/P,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG8P,UAAU,EAAE9P,EAAC,EAAE,EAAE;CAAG;SACpCuH,MAAM,CAACtE,GAAG,CAAC2M,KAAK,CAAC5P,EAAC,CAAC,EAAE+P,MAAM,CAAC,CAAA;CAC5BA,QAAAA,MAAM,IAAIH,KAAK,CAAC5P,EAAC,CAAC,CAACyG,UAAU,CAAA;CACjC,OAAA;CAEA,MAAA,OAAOc,MAAM,CAAA;CACjB,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAjJ,GAAA,EAAA,qBAAA;CAAAC,IAAAA,KAAA,EACA,SAAAyR,mBAA2BC,CAAAA,IAAI,EAAE;CAC7B,MAAA,IAAIjD,IAAI,GAAGV,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACS,IAAI,EAAEV,GAAG,CAACwC,SAAS,CAACC,IAAI,CAAC,CAAA;CACtD,MAAA,IAAIvB,IAAI,GAAGlB,GAAG,CAACkB,IAAI,CAACyC,IAAI,CAAC,CAAA;CAEzB,MAAA,IAAI1I,MAAM,GAAG,IAAIvE,UAAU,CAACgK,IAAI,CAACvG,UAAU,GAAG+G,IAAI,CAAC/G,UAAU,CAAC,CAAA;CAC9Dc,MAAAA,MAAM,CAACtE,GAAG,CAAC+J,IAAI,EAAE,CAAC,CAAC,CAAA;OACnBzF,MAAM,CAACtE,GAAG,CAACuK,IAAI,EAAER,IAAI,CAACvG,UAAU,CAAC,CAAA;CACjC,MAAA,OAAOc,MAAM,CAAA;CACjB,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAjJ,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAiP,IAAYyC,CAAAA,IAAI,EAAE;CACd,MAAA,IAAItC,IAAI,GAAGrB,GAAG,CAACqB,IAAI,CAACsC,IAAI,CAACC,SAAS,EAAED,IAAI,CAACE,QAAQ,CAAC,CAAA;CAClD,MAAA,IAAI7B,IAAI,GAAGhC,GAAG,CAACgC,IAAI,CAAC2B,IAAI,CAAC,CAAA;CACzB,MAAA,IAAIvC,IAAI,GAAGpB,GAAG,CAACoB,IAAI,CAACuC,IAAI,CAAC,CAAA;CACzB,MAAA,OAAO3D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACiB,IAAI,EAAEG,IAAI,EAAEW,IAAI,EAAEZ,IAAI,CAAC,CAAA;CACpD,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAApP,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAoP,IAAAA,CAAYuC,SAAS,EAAEC,QAAQ,EAAE;OAC7B,OAAO7D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACoB,IAAI,EAAE,IAAI3K,UAAU,CAAC,CAC1C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBkN,SAAS,KAAK,EAAE,GAAI,IAAI;CAAG;CAC3BA,MAAAA,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAI,IAAI,EACjBC,QAAQ,KAAK,EAAE,GAAI,IAAI;CAAI;OAC3BA,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAI,IAAI,EACjB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAC,CAAA;CACP,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA7R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA+P,IAAY2B,CAAAA,IAAI,EAAE;OACd,OAAO3D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC+B,IAAI,EAAEhC,GAAG,CAACmC,IAAI,CAACwB,IAAI,CAAC,EAAE3D,GAAG,CAACc,IAAI,CAAC6C,IAAI,CAAC,CAAC,CAAA;CAClE,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAkQ,IAAYwB,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIG,OAAO,GAAGH,IAAI,CAACI,EAAE;SAAEF,QAAQ,GAAGF,IAAI,CAACE,QAAQ,CAAA;CAC/C,MAAA,IAAIvE,KAAK,GAAGqE,IAAI,CAACK,YAAY;SAAEzE,MAAM,GAAGoE,IAAI,CAACM,aAAa,CAAA;OAE1D,OAAOjE,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACkC,IAAI,EAAE,IAAIzL,UAAU,CAAC,CAC1C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBoN,OAAO,KAAK,EAAE,GAAI,IAAI;CAAG;OACzBA,OAAO,KAAK,EAAE,GAAI,IAAI,EACtBA,OAAO,KAAK,CAAC,GAAI,IAAI,EACrBA,OAAO,GAAI,IAAI,EAChB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBD,QAAQ,KAAK,EAAE,GAAI,IAAI;CAAE;OACzBA,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAI,IAAI,EACjB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBvE,KAAK,KAAK,CAAC,GAAI,IAAI;CAAK;OACxBA,KAAK,GAAI,IAAI,EACd,IAAI,EAAE,IAAI,EACTC,MAAM,KAAK,CAAC,GAAI,IAAI,EACpBA,MAAM,GAAI,IAAI,EACf,IAAI,EAAE,IAAI,CACb,CAAC,CAAC,CAAA;CACP,KAAA;CAAC,GAAA,EAAA;KAAAvN,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EAED,SAAA6O,IAAY6C,CAAAA,IAAI,EAAE;CACd,MAAA,OAAO3D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACa,IAAI,EAAEd,GAAG,CAACa,IAAI,CAAC8C,IAAI,CAAC,EAAE3D,GAAG,CAACW,IAAI,CAACgD,IAAI,CAAC,EAAE3D,GAAG,CAACgB,IAAI,CAAC2C,IAAI,CAAC,CAAC,CAAA;CAClF,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA4O,IAAY8C,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIC,SAAS,GAAGD,IAAI,CAACC,SAAS,CAAA;CAC9B,MAAA,IAAIC,QAAQ,GAAGF,IAAI,CAACE,QAAQ,CAAA;OAC5B,OAAO7D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACY,IAAI,EAAE,IAAInK,UAAU,CAAC,CAC1C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBkN,SAAS,KAAK,EAAE,GAAI,IAAI;CAAG;CAC3BA,MAAAA,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAI,IAAI,EACjBC,QAAQ,KAAK,EAAE,GAAI,IAAI;CAAI;CAC3BA,MAAAA,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAI,IAAI,EACjB,IAAI,EAAE,IAAI;CAAc;OACxB,IAAI,EAAE,IAAI;CAAc,OAC3B,CAAC,CAAC,CAAA;CACP,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA7R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA0O,IAAYgD,CAAAA,IAAI,EAAE;OACd,IAAInQ,IAAI,GAAG,IAAI,CAAA;CACf,MAAA,IAAImQ,IAAI,CAAChL,IAAI,KAAK,OAAO,EAAE;CACvBnF,QAAAA,IAAI,GAAGwM,GAAG,CAACwC,SAAS,CAACQ,UAAU,CAAA;CACnC,OAAC,MAAM;CACHxP,QAAAA,IAAI,GAAGwM,GAAG,CAACwC,SAAS,CAACO,UAAU,CAAA;CACnC,OAAA;OACA,OAAO/C,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACU,IAAI,EAAEnN,IAAI,CAAC,CAAA;CACxC,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA+O,IAAY2C,CAAAA,IAAI,EAAE;OACd,IAAIO,IAAI,GAAG,IAAI,CAAA;CACf,MAAA,IAAIP,IAAI,CAAChL,IAAI,KAAK,OAAO,EAAE;CACvBuL,QAAAA,IAAI,GAAGlE,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACoC,IAAI,EAAErC,GAAG,CAACwC,SAAS,CAACU,IAAI,CAAC,CAAA;CACtD,OAAC,MAAM;CACHgB,QAAAA,IAAI,GAAGlE,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACmC,IAAI,EAAEpC,GAAG,CAACwC,SAAS,CAACW,IAAI,CAAC,CAAA;CACtD,OAAA;OACA,OAAOnD,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACe,IAAI,EAAEkD,IAAI,EAAElE,GAAG,CAACO,IAAI,EAAE,EAAEP,GAAG,CAACuB,IAAI,CAACoC,IAAI,CAAC,CAAC,CAAA;CACpE,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;KAAAC,KAAA,EACA,SAAAsO,IAAAA,GAAc;CACV,MAAA,IAAItF,MAAM,GAAG+E,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACM,IAAI,EAC/BP,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACO,IAAI,EAAER,GAAG,CAACwC,SAAS,CAACS,IAAI,CAAC,CAC9C,CAAA;CACD,MAAA,OAAOhI,MAAM,CAAA;CACjB,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAjJ,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAsP,IAAYoC,CAAAA,IAAI,EAAE;OACd,IAAI1I,MAAM,GAAG+E,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACsB,IAAI;CAAG;CAClCvB,MAAAA,GAAG,CAAC0B,IAAI,CAACiC,IAAI,CAAC;CAAG;CACjB3D,MAAAA,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC2B,IAAI,EAAE5B,GAAG,CAACwC,SAAS,CAACG,IAAI,CAAC;CAAG;CAC9C3C,MAAAA,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACwB,IAAI,EAAEzB,GAAG,CAACwC,SAAS,CAACI,IAAI,CAAC;CAAG;CAC9C5C,MAAAA,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC0B,IAAI,EAAE3B,GAAG,CAACwC,SAAS,CAACM,IAAI,CAAC;CAAG;CAC9C9C,MAAAA,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACuB,IAAI,EAAExB,GAAG,CAACwC,SAAS,CAACK,IAAI,CAAC;QAC9C,CAAA;;CACD,MAAA,OAAO5H,MAAM,CAAA;CACjB,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAjJ,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAyP,IAAYiC,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIA,IAAI,CAAChL,IAAI,KAAK,OAAO,EAAE;CACvB;SACA,OAAOqH,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACyB,IAAI,EAAE1B,GAAG,CAACwC,SAAS,CAACE,WAAW,EAAE1C,GAAG,CAACmB,IAAI,CAACwC,IAAI,CAAC,CAAC,CAAA;CAC7E,OAAC,MAAM;CACH,QAAA,IAAIA,IAAI,CAACQ,SAAS,KAAK,KAAK,EAAE;CAC1B;WACA,OAAOnE,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACyB,IAAI,EAAE1B,GAAG,CAACwC,SAAS,CAACE,WAAW,EAAE1C,GAAG,CAACE,IAAI,CAACyD,IAAI,CAAC,CAAC,CAAA;CAC7E,SAAC,MAAM;CACH;WACA,OAAO3D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACyB,IAAI,EAAE1B,GAAG,CAACwC,SAAS,CAACE,WAAW,EAAE1C,GAAG,CAACI,IAAI,CAACuD,IAAI,CAAC,CAAC,CAAA;CAC7E,SAAA;CACJ,OAAA;CACJ,KAAA;CAAC,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EAED,SAAAkP,IAAYwC,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIS,YAAY,GAAGT,IAAI,CAACS,YAAY,CAAA;CACpC,MAAA,IAAIC,UAAU,GAAGV,IAAI,CAACW,eAAe,CAAA;CAErC,MAAA,IAAI9Q,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACzB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACtB,IAAI,EAAE0N,YAAY;CAAO;CACzB,MAAA,IAAI,EAAE,IAAI;CAAe;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBC,UAAU,KAAK,CAAC,GAAI,IAAI;CAAG;CAC3BA,MAAAA,UAAU,GAAI,IAAI,EACnB,IAAI,EAAE,IAAI,CACb,CAAC,CAAA;CAEF,MAAA,OAAOrE,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACkB,IAAI,EAAE3N,IAAI,EAAEwM,GAAG,CAACS,IAAI,CAACkD,IAAI,CAAC,CAAC,CAAA;CACxD,KAAA;CAAC,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EAED,SAAAwO,IAAYkD,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIY,MAAM,GAAGZ,IAAI,CAACY,MAAM,IAAI,EAAE,CAAA;CAC9B,MAAA,IAAIC,UAAU,GAAGD,MAAM,CAACzR,MAAM,CAAA;CAC9B,MAAA,IAAIU,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;;OAEzB,IAAI;CAAqB;CACzB,MAAA,IAAI,GAAG8N,UAAU;CAAQ;CACzB,MAAA,IAAI,EAAE,IAAI;CAAe;OACzB,IAAI;CAAqB;;OAEzB,IAAI;CAAqB;CACzB,MAAA,IAAI,GAAGA,UAAU;CAAQ;OACzB,IAAI;CAAqB;OACzB,IAAI;CAAqB;OACzB,IAAI,EAAE,IAAI,EAAE,IAAI;CAAS;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;;CAEzB,MAAA,IAAI;QACP,CAAClN,MAAM,CAAC,CACLkN,UAAU,CACb,CAAC,CAAClN,MAAM,CACLiN,MAAM,CACT,CAACjN,MAAM,CAAC,CACL,IAAI,EAAE,IAAI,EAAE,IAAI;CAAS,OAC5B,CAAC,CAAC,CAAA;;OACH,OAAO0I,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACQ,IAAI,EAAEjN,IAAI,CAAC,CAAA;CACxC,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAiO,IAAYyD,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIc,IAAI,GAAGd,IAAI,CAACc,IAAI,CAAA;CACpB,MAAA,IAAMnF,KAAK,GAAGqE,IAAI,CAACe,UAAU,CAAA;CAC7B,MAAA,IAAMnF,MAAM,GAAGoE,IAAI,CAACgB,WAAW,CAAA;CAC/B,MAAA,IAAInR,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV4I,KAAK,KAAK,CAAC,GAAG,GAAG,EACjBA,KAAK,GAAG,GAAG,EACXC,MAAM,KAAK,CAAC,GAAG,GAAG,EAClBA,MAAM,GAAG,GAAG,EACZ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EACJ,CAAC,EACD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EACP,CAAC,EAAE,EAAE,EACL,GAAG,EAAE,GAAG,CAAC,CACZ,CAAA;OACD,OAAOS,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACC,IAAI,EAAE1M,IAAI,EAAEwM,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACE,IAAI,EAAEsE,IAAI,CAAC,CAAC,CAAA;CACvE,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAzS,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAmO,IAAYuD,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIc,IAAI,GAAGd,IAAI,CAACc,IAAI,CAAA;CACpB,MAAA,IAAMnF,KAAK,GAAGqE,IAAI,CAACe,UAAU,CAAA;CAC7B,MAAA,IAAMnF,MAAM,GAAGoE,IAAI,CAACgB,WAAW,CAAA;CAC/B,MAAA,IAAInR,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV4I,KAAK,KAAK,CAAC,GAAG,GAAG,EACjBA,KAAK,GAAG,GAAG,EACXC,MAAM,KAAK,CAAC,GAAG,GAAG,EAClBA,MAAM,GAAG,GAAG,EACZ,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EACX,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EACJ,CAAC,EACD,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EACV,CAAC,EAAE,CAAC,EAAE,CAAC,EACP,CAAC,EAAE,EAAE,EACL,GAAG,EAAE,GAAG,CACX,CAAC,CAAA;OACF,OAAOS,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACG,IAAI,EAAE5M,IAAI,EAAEwM,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACI,IAAI,EAAEoE,IAAI,CAAC,CAAC,CAAA;CACvE,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAzS,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAmP,IAAYuC,CAAAA,IAAI,EAAE;CACd,MAAA,OAAO3D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACmB,IAAI,EAAEpB,GAAG,CAACkC,IAAI,CAACyB,IAAI,CAAC,CAAC,CAAA;CAClD,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAA3R,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAiQ,IAAYyB,CAAAA,IAAI,EAAE;CACd,MAAA,IAAIG,OAAO,GAAGH,IAAI,CAACI,EAAE,CAAA;CACrB,MAAA,IAAIvQ,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBoN,OAAO,KAAK,EAAE,GAAI,IAAI;CAAE;OACxBA,OAAO,KAAK,EAAE,GAAI,IAAI,EACtBA,OAAO,KAAK,CAAC,GAAI,IAAI,EACrBA,OAAO,GAAI,IAAI,EAChB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;CACzB,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG,OAC5B,CAAC,CAAA;;OACF,OAAO9D,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACiC,IAAI,EAAE1O,IAAI,CAAC,CAAA;CACxC,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAgP,IAAAA,CAAY2D,KAAK,EAAEC,mBAAmB,EAAE;OACpC,OAAO7E,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACgB,IAAI,EAAEjB,GAAG,CAACe,IAAI,CAAC6D,KAAK,CAACE,cAAc,CAAC,EAAE9E,GAAG,CAAC+B,IAAI,CAAC6C,KAAK,EAAEC,mBAAmB,CAAC,CAAC,CAAA;CACxG,KAAA;CACA;CAAA,GAAA,EAAA;KAAA7S,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA8O,IAAY+D,CAAAA,cAAc,EAAE;CACxB,MAAA,IAAItR,IAAI,GAAG,IAAIkD,UAAU,CAAC,CACtB,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACrBoO,cAAc,KAAK,EAAE,GAAI,IAAI;CAAG;CAChCA,MAAAA,cAAc,KAAK,EAAE,GAAI,IAAI,EAC7BA,cAAc,KAAK,CAAC,GAAI,IAAI,EAC5BA,cAAc,GAAI,IAAI,CAC1B,CAAC,CAAA;OACF,OAAO9E,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACc,IAAI,EAAEvN,IAAI,CAAC,CAAA;CACxC,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA8P,IAAAA,CAAY6C,KAAK,EAAEC,mBAAmB,EAAE;CACpC,MAAA,IAAIf,OAAO,GAAGc,KAAK,CAACb,EAAE,CAAA;;CAEtB;OACA,IAAIjC,IAAI,GAAG9B,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC6B,IAAI,EAAE,IAAIpL,UAAU,CAAC,CAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBoN,OAAO,KAAK,EAAE,GAAI,IAAI;CAAE;CACxBA,MAAAA,OAAO,KAAK,EAAE,GAAI,IAAI,EACtBA,OAAO,KAAK,CAAC,GAAI,IAAI,EACrBA,OAAO,GAAI,IAAI,CACnB,CAAC,CAAC,CAAA;CACH;OACA,IAAIjC,IAAI,GAAG7B,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC4B,IAAI,EAAE,IAAInL,UAAU,CAAC,CAC9C,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAG;OACxBmO,mBAAmB,KAAK,EAAE,GAAI,IAAI;CAAG;CACrCA,MAAAA,mBAAmB,KAAK,EAAE,GAAI,IAAI,EAClCA,mBAAmB,KAAK,CAAC,GAAI,IAAI,EACjCA,mBAAmB,GAAI,IAAI,CAC/B,CAAC,CAAC,CAAA;CACH,MAAA,IAAIvD,IAAI,GAAGtB,GAAG,CAACsB,IAAI,CAACsD,KAAK,CAAC,CAAA;OAC1B,IAAI3C,IAAI,GAAGjC,GAAG,CAACiC,IAAI,CAAC2C,KAAK,EAAEtD,IAAI,CAACnH,UAAU,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;CAEtE,MAAA,OAAO6F,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAAC8B,IAAI,EAAED,IAAI,EAAED,IAAI,EAAEI,IAAI,EAAEX,IAAI,CAAC,CAAA;CAC1D,KAAA;;CAEA;CAAA,GAAA,EAAA;KAAAtP,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAqP,IAAYsD,CAAAA,KAAK,EAAE;OACf,IAAIpR,IAAI,GAAG,IAAIkD,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;CAChC,MAAA,IAAIqO,KAAK,GAAGH,KAAK,CAACG,KAAK,CAAA;OACvBvR,IAAI,CAAC,CAAC,CAAC,GAAGuR,KAAK,CAACC,SAAS,IAAI,CAAC,GACxBD,KAAK,CAACE,SAAS,IAAI,CAAC,GACpBF,KAAK,CAACG,YAAY,IAAI,CAAC,GACvBH,KAAK,CAACI,aAAa,CAAA;OACzB,OAAOnF,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACqB,IAAI,EAAE9N,IAAI,CAAC,CAAA;CACxC,KAAA;CACA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAAgQ,IAAAA,CAAY2C,KAAK,EAAEnB,MAAM,EAAE;CACvB,MAAA,IAAI2B,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAA;CACtB,MAAA,IAAI5R,IAAI,GAAG,IAAIkD,UAAU,CAAC0O,QAAQ,CAAC,CAAA;OACnC3B,MAAM,IAAI,CAAC,GAAG2B,QAAQ,CAAA;OAEtB5R,IAAI,CAACmD,GAAG,CAAC,CACL,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAO;CAC7B,MAAA,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;CAAE;OACvB8M,MAAM,KAAK,EAAE,GAAI,IAAI;CAAO;CAC5BA,MAAAA,MAAM,KAAK,EAAE,GAAI,IAAI,EACrBA,MAAM,KAAK,CAAC,GAAI,IAAI,EACpBA,MAAM,GAAI,IAAI,CAClB,EAAE,CAAC,CAAC,CAAA;CAEL,MAAA,IAAII,QAAQ,GAAGe,KAAK,CAACf,QAAQ,CAAA;CAC7B,MAAA,IAAIR,IAAI,GAAGuB,KAAK,CAACvB,IAAI,CAAA;CACrB,MAAA,IAAI0B,KAAK,GAAGH,KAAK,CAACG,KAAK,CAAA;CACvB,MAAA,IAAIM,GAAG,GAAGT,KAAK,CAACS,GAAG,CAAA;OAEnB7R,IAAI,CAACmD,GAAG,CAAC,CACJkN,QAAQ,KAAK,EAAE,GAAI,IAAI;CAAG;CAC1BA,MAAAA,QAAQ,KAAK,EAAE,GAAI,IAAI,EACvBA,QAAQ,KAAK,CAAC,GAAI,IAAI,EACtBA,QAAQ,GAAI,IAAI,EAChBR,IAAI,KAAK,EAAE,GAAI,IAAI;CAAO;OAC1BA,IAAI,KAAK,EAAE,GAAI,IAAI,EACnBA,IAAI,KAAK,CAAC,GAAI,IAAI,EAClBA,IAAI,GAAI,IAAI,EACZ0B,KAAK,CAACC,SAAS,IAAI,CAAC,GAAID,KAAK,CAACE,SAAS;CAAG;CAC1CF,MAAAA,KAAK,CAACG,YAAY,IAAI,CAAC,GAAKH,KAAK,CAACI,aAAa,IAAI,CAAE,GAAGJ,KAAK,CAACO,SAAS,EACxE,IAAI,EAAE,IAAI;CAAiB;OAC1BD,GAAG,KAAK,EAAE,GAAI,IAAI;CAAQ;CAC1BA,MAAAA,GAAG,KAAK,EAAE,GAAI,IAAI,EAClBA,GAAG,KAAK,CAAC,GAAI,IAAI,EACjBA,GAAG,GAAI,IAAI,CACf,EAAE,EAAE,CAAC,CAAA;OAEN,OAAOrF,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACgC,IAAI,EAAEzO,IAAI,CAAC,CAAA;CACxC,KAAA;CACA;CAAA,GAAA,EAAA;KAAAxB,GAAA,EAAA,MAAA;CAAAC,IAAAA,KAAA,EACA,SAAA2O,IAAYpN,CAAAA,IAAI,EAAE;OACd,OAAOwM,GAAG,CAACoD,GAAG,CAACpD,GAAG,CAACC,KAAK,CAACW,IAAI,EAAEpN,IAAI,CAAC,CAAA;CACxC,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAAwM,GAAA,CAAA;CAAA,CAAA,EAAA,CAAA;CAGLA,GAAG,CAAC7L,IAAI,EAAE;;;;CC/jBV,SAASoR,kCAAkCA,CAACC,WAAW,EAAE;GACrD,IAAM7B,IAAI,GAAG,EAAE,CAAA;GACf,IAAMjM,CAAC,GAAG,IAAIV,QAAQ,CAACwO,WAAW,CAAC1K,MAAM,CAAC,CAAA;GAC1C,IAAInD,OAAO,GAAGD,CAAC,CAAC+N,QAAQ,CAAC,CAAC,CAAC,CAAC;GAC5B,IAAIC,UAAU,GAAGhO,CAAC,CAAC+N,QAAQ,CAAC,CAAC,CAAC,CAAC;GACJ/N,CAAC,CAAC+N,QAAQ,CAAC,CAAC,EAAE;GAC1B/N,CAAC,CAAC+N,QAAQ,CAAC,CAAC,EAAE;;CAE7B,EAAA,IAAI9N,OAAO,KAAK,CAAC,IAAI+N,UAAU,KAAK,CAAC,EAAE;CACnC;;CAEA,IAAA,OAAO,EAAE,CAAA;CACb,GAAA;CAEA,EAAA,IAAMC,eAAe,GAAG,CAACjO,CAAC,CAAC+N,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;CAEhD,EAAA,IAAIE,eAAe,KAAK,CAAC,IAAIA,eAAe,KAAK,CAAC,EAAE;CAAG;CACnD;CACA,IAAA,OAAO,EAAE,CAAA;CACb,GAAA;GACA,IAAIC,QAAQ,GAAGlO,CAAC,CAAC+N,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;;GAElC,IAAIG,QAAQ,KAAK,CAAC,EAAE;CAChB;CACA,IAAA,OAAO,EAAE,CAAA;CACb,GACI;GAGJ,IAAInC,MAAM,GAAG,CAAC,CAAA;GACd,KAAK,IAAI/P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkS,QAAQ,EAAElS,CAAC,EAAE,EAAE;KAC/B,IAAIO,GAAG,GAAGyD,CAAC,CAACmO,SAAS,CAACpC,MAAM,EAAE,KAAK,CAAC,CAAC;CACrCA,IAAAA,MAAM,IAAI,CAAC,CAAA;KAEX,IAAIxP,GAAG,KAAK,CAAC,EAAE;CACX,MAAA,SAAA;CACJ,KAAA;;CAEA;CACA,IAAA,IAAI6R,GAAG,GAAG,IAAIpP,UAAU,CAAC8O,WAAW,CAAC1K,MAAM,EAAE2I,MAAM,EAAExP,GAAG,CAAC,CAAA;CACzDwP,IAAAA,MAAM,IAAIxP,GAAG,CAAA;CACb;CACA;CACA;CACA;CACA,IAAA,IAAIsQ,MAAM,GAAG3I,SAAS,CAACM,QAAQ,CAAC4J,GAAG,CAAC,CAAA;CACpC;KACA,IAAIpS,CAAC,KAAK,CAAC,EAAE;CACT;CACA,MAAA,SAAA;CACJ,KAAA;KACAiQ,IAAI,CAACmC,GAAG,GAAGA,GAAG,CAAA;KACdnC,IAAI,CAACC,SAAS,GAAG,IAAI,CAAA;CACrBD,IAAAA,IAAI,CAACe,UAAU,GAAGH,MAAM,CAAC/E,UAAU,CAACF,KAAK,CAAA;CACzCqE,IAAAA,IAAI,CAACgB,WAAW,GAAGJ,MAAM,CAAC/E,UAAU,CAACD,MAAM,CAAA;CAC3CoE,IAAAA,IAAI,CAACK,YAAY,GAAGO,MAAM,CAAC9E,YAAY,CAACH,KAAK,CAAA;CAC7CqE,IAAAA,IAAI,CAACM,aAAa,GAAGM,MAAM,CAAC9E,YAAY,CAACF,MAAM,CAAA;CAE/CoE,IAAAA,IAAI,CAACoC,OAAO,GAAGxB,MAAM,CAAChI,cAAc,CAAA;CACpCoH,IAAAA,IAAI,CAACqC,KAAK,GAAGzB,MAAM,CAAC9H,YAAY,CAAA;CAChCkH,IAAAA,IAAI,CAACsC,QAAQ,GAAG1B,MAAM,CAACzH,SAAS,CAAA;CAChC6G,IAAAA,IAAI,CAACuC,YAAY,GAAG3B,MAAM,CAAC3H,aAAa,CAAA;CACxC+G,IAAAA,IAAI,CAACwC,QAAQ,GAAG5B,MAAM,CAAClF,SAAS,CAAA;CAChCsE,IAAAA,IAAI,CAACyC,SAAS,GAAG7B,MAAM,CAACpF,UAAU,CAAA;KAElC,IAAIoF,MAAM,CAACpF,UAAU,CAACC,KAAK,KAAK,KAAK,IACjCmF,MAAM,CAACpF,UAAU,CAACnB,OAAO,KAAK,CAAC,IAC/BuG,MAAM,CAACpF,UAAU,CAAClB,OAAO,KAAK,CAAC,EAAE;OACjC0F,IAAI,CAACyC,SAAS,GAAG;CACbhH,QAAAA,KAAK,EAAE,IAAI;CACXtB,QAAAA,GAAG,EAAE,MAAM;CACXE,QAAAA,OAAO,EAAE,KAAK;CACdC,QAAAA,OAAO,EAAE,IAAA;QACZ,CAAA;CACL,KAAA;CAEA,IAAA,IAAIA,OAAO,GAAG0F,IAAI,CAACyC,SAAS,CAACnI,OAAO,CAAA;CACpC,IAAA,IAAID,OAAO,GAAG2F,IAAI,CAACyC,SAAS,CAACpI,OAAO,CAAA;KAEpC2F,IAAI,CAAC0C,iBAAiB,GAAG1C,IAAI,CAACC,SAAS,IAAI3F,OAAO,GAAGD,OAAO,CAAC,CAAA;KAE7D,IAAIsI,UAAU,GAAGR,GAAG,CAACjL,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;KAEnC,IAAI0L,WAAW,GAAG,OAAO,CAAA;KACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;OACxB,IAAIC,CAAC,GAAGH,UAAU,CAACE,CAAC,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAAA;CAClC,MAAA,IAAID,CAAC,CAAC3T,MAAM,GAAG,CAAC,EAAE;SACd2T,CAAC,GAAG,GAAG,GAAGA,CAAC,CAAA;CACf,OAAA;CACAF,MAAAA,WAAW,IAAIE,CAAC,CAAA;CACpB,KAAA;CACA;KACA9C,IAAI,CAACgD,KAAK,GAAGJ,WAAW,CAAA;CAC5B,GAAA;GAEA,IAAIK,QAAQ,GAAGlP,CAAC,CAAC+N,QAAQ,CAAChC,MAAM,CAAC,CAAC;GAClC,IAAImD,QAAQ,KAAK,CAAC,EAAE;CAChB;CACA,IAAA,OAAO,EAAE,CAAA;CACb,GACI;CAGJnD,EAAAA,MAAM,EAAE,CAAA;GACR,KAAK,IAAI/P,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGkT,QAAQ,EAAElT,EAAC,EAAE,EAAE;KAC/B,IAAIO,IAAG,GAAGyD,CAAC,CAACmO,SAAS,CAACpC,MAAM,EAAE,KAAK,CAAC,CAAC;CACrCA,IAAAA,MAAM,IAAI,CAAC,CAAA;KAEX,IAAIxP,IAAG,KAAK,CAAC,EAAE;CACX,MAAA,SAAA;CACJ,KAAA;CACA,IAAA,IAAI4S,GAAG,GAAG,IAAInQ,UAAU,CAAC8O,WAAW,CAAC1K,MAAM,EAAE2I,MAAM,EAAExP,IAAG,CAAC,CAAA;;CAEzD;CACAwP,IAAAA,MAAM,IAAIxP,IAAG,CAAA;KACb0P,IAAI,CAACkD,GAAG,GAAGA,GAAG,CAAA;CAClB,GAAA;GAEAlD,IAAI,CAACQ,SAAS,GAAG,KAAK,CAAA;GAEtB,IAAIR,IAAI,CAACmC,GAAG,EAAE;CACV,IAAA,IAAMgB,SAAS,GAAGnD,IAAI,CAACmC,GAAG,CAAC3L,UAAU,CAAA;CACrC,IAAA,IAAM4M,OAAO,GAAG,IAAIrQ,UAAU,CAAC,CAC1BoQ,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAI,IAAI,CACrB,CAAC,CAAA;KACF,IAAMhB,IAAG,GAAG,IAAIpP,UAAU,CAACoQ,SAAS,GAAG,CAAC,CAAC,CAAA;CACzChB,IAAAA,IAAG,CAACnP,GAAG,CAACoQ,OAAO,EAAE,CAAC,CAAC,CAAA;KACnBjB,IAAG,CAACnP,GAAG,CAACgN,IAAI,CAACmC,GAAG,EAAE,CAAC,CAAC,CAAA;KACpBnC,IAAI,CAACmC,GAAG,GAAGA,IAAG,CAAA;CAClB,GAAA;GAEA,IAAInC,IAAI,CAACkD,GAAG,EAAE;CACV,IAAA,IAAMG,SAAS,GAAGrD,IAAI,CAACkD,GAAG,CAAC1M,UAAU,CAAA;CACrC,IAAA,IAAM8M,OAAO,GAAG,IAAIvQ,UAAU,CAAC,CAC1BsQ,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,EAAE,GAAI,IAAI,EACxBA,SAAS,KAAK,CAAC,GAAI,IAAI,EACvBA,SAAS,GAAI,IAAI,CACrB,CAAC,CAAA;KACF,IAAMH,IAAG,GAAG,IAAInQ,UAAU,CAACsQ,SAAS,GAAG,CAAC,CAAC,CAAA;CACzCH,IAAAA,IAAG,CAAClQ,GAAG,CAACsQ,OAAO,EAAE,CAAC,CAAC,CAAA;KACnBJ,IAAG,CAAClQ,GAAG,CAACgN,IAAI,CAACkD,GAAG,EAAE,CAAC,CAAC,CAAA;KACpBlD,IAAI,CAACkD,GAAG,GAAGA,IAAG,CAAA;CAClB,GAAA;;CAGA;CACA,EAAA,OAAOlD,IAAI,CAAA;CACf,CAAA;CAEA,IAAMuD,kBAAkB,GAAG;CACvBC,EAAAA,KAAK,EAAE,OAAO;CACdC,EAAAA,IAAI,EAAE,MAAM;CACZC,EAAAA,MAAM,EAAE,QAAA;CACZ,CAAC,CAAA;CAAA,IAEKC,UAAU,0BAAA1R,QAAA,EAAA;GAAAC,SAAA,CAAAyR,UAAA,EAAA1R,QAAA,CAAA,CAAA;CAAA,EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAuR,UAAA,CAAA,CAAA;GACZ,SAAAA,UAAAA,CAAYC,OAAO,EAAE;CAAA,IAAA,IAAAvR,KAAA,CAAA;CAAAlE,IAAAA,eAAA,OAAAwV,UAAA,CAAA,CAAA;KACjBtR,KAAA,GAAAF,MAAA,CAAAG,IAAA,CAAA,IAAA,CAAA,CAAA;KACAD,KAAA,CAAKwR,OAAO,GAAG,KAAK,CAAA;KACpBxR,KAAA,CAAKyR,UAAU,GAAG,KAAK,CAAA;KACvBzR,KAAA,CAAK0R,oBAAoB,GAAG,KAAK,CAAA;KACjC1R,KAAA,CAAKkC,OAAO,GAAG,IAAI,CAAA;KACnBlC,KAAA,CAAK2R,eAAe,GAAG,KAAK,CAAA;KAC5B3R,KAAA,CAAK4R,YAAY,GAAG,IAAI,CAAA;KACxB5R,KAAA,CAAKwR,OAAO,GAAG,KAAK,CAAA;KACpBxR,KAAA,CAAK8O,cAAc,GAAG,CAAC,CAAA;KACvB9O,KAAA,CAAK6R,UAAU,GAAG,IAAI,CAAA;KACtB7R,KAAA,CAAK8R,QAAQ,GAAG,KAAK,CAAA;CACrB9R,IAAAA,KAAA,CAAK+R,WAAW,GAAG,IAAIC,MAAM,CAACC,WAAW,EAAE,CAAA;CAC3CjS,IAAAA,KAAA,CAAKkS,oBAAoB,GAAGF,MAAM,CAACG,GAAG,CAACC,eAAe,CAACpS,KAAA,CAAK+R,WAAW,CAAC,CAAA;CACxE/R,IAAAA,KAAA,CAAKqS,aAAa,GAAGd,OAAO,CAACc,aAAa,CAAA;CAC1CrS,IAAAA,KAAA,CAAKqS,aAAa,CAACvM,GAAG,GAAG9F,KAAA,CAAKkS,oBAAoB,CAAA;CAAC,IAAA,OAAAlS,KAAA,CAAA;CACvD,GAAA;CAACjE,EAAAA,YAAA,CAAAuV,UAAA,EAAA,CAAA;KAAAtV,GAAA,EAAA,SAAA;KAAAC,KAAA,EAED,SAAAoE,OAAAA,GAAU;OACN,IAAI,CAAC0R,WAAW,GAAG,IAAI,CAAA;OACvB,IAAI,CAACJ,eAAe,GAAG,KAAK,CAAA;OAC5B,IAAI,CAACC,YAAY,GAAG,IAAI,CAAA;OACxB,IAAI,CAACJ,OAAO,GAAG,KAAK,CAAA;OACpB,IAAI,CAACC,UAAU,GAAG,KAAK,CAAA;OACvB,IAAI,CAAC3C,cAAc,GAAG,CAAC,CAAA;OACvB,IAAI,CAAC+C,UAAU,GAAG,IAAI,CAAA;OACtB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAA;OACrB,IAAI,CAACJ,oBAAoB,GAAG,KAAK,CAAA;OACjC,IAAI,CAAC/U,GAAG,EAAE,CAAA;CACd,KAAA;CAAC,GAAA,EAAA;KAAAX,GAAA,EAAA,eAAA;CAAAC,IAAAA,KAAA,EAED,SAAAqW,aAAAA,CAAcpQ,OAAO,EAAEG,SAAS,EAAE;OAC9B,IAAIkM,MAAM,GAAG,EAAE,CAAA;CAEfA,MAAAA,MAAM,GAAGgB,kCAAkC,CAAClN,SAAS,CAAC,CAAA;CACtD,MAAA,IAAMkQ,QAAQ,GAAG;CACbxE,QAAAA,EAAE,EAAE,CAAC;CAAE;CACPpL,QAAAA,IAAI,EAAE,OAAO;CACbiL,QAAAA,SAAS,EAAE,IAAI;CACfC,QAAAA,QAAQ,EAAE,CAAC;CACXY,QAAAA,IAAI,EAAEpM,SAAS;SACfqM,UAAU,EAAEH,MAAM,CAACG,UAAU;SAC7BC,WAAW,EAAEJ,MAAM,CAACI,WAAW;SAC/BR,SAAS,EAAEI,MAAM,CAACJ,SAAAA;QACrB,CAAA;CACD,MAAA,IAAMqE,OAAO,GAAGxI,GAAG,CAAC0D,mBAAmB,CAAC6E,QAAQ,CAAC,CAAA;CACjD,MAAA,IAAI,CAACE,aAAa,CAACD,OAAO,CAAC1N,MAAM,CAAC,CAAA;OAClC,IAAI,CAACgK,cAAc,GAAG,CAAC,CAAA;OACvB,IAAI,CAAC+C,UAAU,GAAG,IAAI,CAAA;OACtB,IAAI,CAACC,QAAQ,GAAG,KAAK,CAAA;CACzB,KAAA;CAAC,GAAA,EAAA;KAAA9V,GAAA,EAAA,aAAA;KAAAC,KAAA,EAED,SAAAyW,WAAYC,CAAAA,OAAO,EAAEC,QAAQ,EAAEC,EAAE,EAAE;CAC/B,MAAA,IAAI,CAAC,IAAI,CAACnB,oBAAoB,IAAIkB,QAAQ,EAAE;SACxC,IAAI,CAAClB,oBAAoB,GAAG,IAAI,CAAA;CACpC,OAAA;OAEA,IAAI,IAAI,CAACA,oBAAoB,EAAE;CAC3B,QAAA,IAAI,IAAI,CAACoB,eAAe,KAAK,IAAI,EAAE;WAC/B,IAAI,CAACA,eAAe,GAAGD,EAAE,CAAA;CAC7B,SAAA;CACA,QAAYA,EAAE,GAAG,IAAI,CAACC,gBAAe;SAErC,IAAI,CAACC,YAAY,CAACJ,OAAO,EAAEE,EAAE,EAAED,QAAQ,CAAC,CAAA;CAC5C,OAAA;CACJ,KAAA;CAAC,GAAA,EAAA;KAAA5W,GAAA,EAAA,cAAA;KAAAC,KAAA,EAED,SAAA8W,YAAavD,CAAAA,WAAW,EAAEtO,GAAG,EAAE0R,QAAQ,EAAE;CACrC,MAAA,IAAII,KAAK,GAAGxD,WAAW,CAACrL,UAAU,CAAA;CAClC,MAAA,IAAM8O,MAAM,GAAG,IAAI,CAACZ,aAAa,CAAA;CACjC,MAAA,IAAIY,MAAM,CAACC,QAAQ,CAACpW,MAAM,GAAG,CAAC,EAAE;SAC5B,IAAI,CAACqW,aAAa,CAACF,MAAM,CAACC,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,EAAEH,MAAM,CAACC,QAAQ,CAACG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;SACpE,IAAI,CAACvB,QAAQ,GAAG,KAAK,CAAA;CACzB,OAAA;CACA,MAAA,IAAI,IAAI,CAACwB,QAAQ,IAAIpS,GAAG,GAAG,IAAI,CAAC2Q,UAAU,CAAC3Q,GAAG,GAAG,CAAC,EAAE;SAChD,IAAI,CAACoS,QAAQ,GAAG,KAAK,CAAA;CACrB,QAAA,IAAI,CAACzB,UAAU,GAAG,EAAE,CAAA;CACxB,OAAC,MAAK,IAAI,IAAI,CAACA,UAAU,IAAI3Q,GAAG,IAAI,IAAI,CAAC2Q,UAAU,CAAC3Q,GAAG,EAAE;CACrD;SACA,IAAIqS,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC1B,UAAU,CAACxE,IAAI,CAAA;CACxC,QAAA,IAAImG,OAAO,GAAG,IAAI9S,UAAU,CAAC6S,SAAS,CAAC,CAAA;SACvCC,OAAO,CAAC,CAAC,CAAC,GAAGD,SAAS,KAAK,EAAE,GAAG,GAAG,CAAA;SACnCC,OAAO,CAAC,CAAC,CAAC,GAAGD,SAAS,KAAK,EAAE,GAAG,GAAG,CAAA;SACnCC,OAAO,CAAC,CAAC,CAAC,GAAGD,SAAS,KAAK,CAAC,GAAG,GAAG,CAAA;CAClCC,QAAAA,OAAO,CAAC,CAAC,CAAC,GAAGD,SAAS,GAAG,GAAG,CAAA;SAC5BC,OAAO,CAAC7S,GAAG,CAACqJ,GAAG,CAACC,KAAK,CAACW,IAAI,EAAE,CAAC,CAAC,CAAA;SAC9B4I,OAAO,CAAC7S,GAAG,CAAC,IAAI,CAACkR,UAAU,CAACrU,IAAI,EAAE,CAAC,CAAC,CAAA;SAEpC,IAAI,CAACqU,UAAU,CAAChE,QAAQ,GAAG3M,GAAG,GAAG,IAAI,CAAC2Q,UAAU,CAAC3Q,GAAG,CAAA;CACpD;CACA,QAAA,IAAIuS,OAAO,GAAGzJ,GAAG,CAACiB,IAAI,CAAC,IAAI,CAAC4G,UAAU,EAAE,IAAI,CAACA,UAAU,CAAC3Q,GAAG,CAAC,CAAA;CAC5D,QAAA,IAAI+D,MAAM,GAAG,IAAIvE,UAAU,CAAC+S,OAAO,CAACtP,UAAU,GAAGqP,OAAO,CAACrP,UAAU,CAAC,CAAA;CACpEc,QAAAA,MAAM,CAACtE,GAAG,CAAC8S,OAAO,EAAE,CAAC,CAAC,CAAA;SACtBxO,MAAM,CAACtE,GAAG,CAAC6S,OAAO,EAAEC,OAAO,CAACtP,UAAU,CAAC,CAAA;CACvC;CACA,QAAA,IAAI,CAACsO,aAAa,CAACxN,MAAM,CAACH,MAAM,CAAC,CAAA;CACrC,OAAC,MACI;SACD,IAAI,CAACgN,QAAQ,GAAG,KAAK,CAAA;CACrB,QAAA,IAAI,CAACD,UAAU,GAAG,EAAE,CAAA;CACxB,OAAA;CACA,MAAA,IAAI,CAAC,IAAI,CAACA,UAAU,EAAE;CAClB,QAAA,IAAI,CAACA,UAAU,GAAG,EAAE,CAAA;CACxB,OAAA;CACA,MAAA,IAAI,CAACA,UAAU,CAAC9D,EAAE,GAAG,CAAC,CAAA;OACtB,IAAI,CAAC8D,UAAU,CAAC/C,cAAc,GAAG,EAAE,IAAI,CAACA,cAAc,CAAA;CACtD,MAAA,IAAI,CAAC+C,UAAU,CAACxE,IAAI,GAAG2F,KAAK,CAAA;CAC5B,MAAA,IAAI,CAACnB,UAAU,CAAC3Q,GAAG,GAAGA,GAAG,CAAA;CACzB,MAAA,IAAI,CAAC2Q,UAAU,CAACxC,GAAG,GAAG,CAAC,CAAA;CACvB,MAAA,IAAI,CAACwC,UAAU,CAAC6B,UAAU,GAAGd,QAAQ,CAAA;CACrC,MAAA,IAAI,CAACf,UAAU,CAACrU,IAAI,GAAGgS,WAAW,CAAA;CAClC;CACA,MAAA,IAAI,CAACqC,UAAU,CAAC9C,KAAK,GAAG;CACpBC,QAAAA,SAAS,EAAE,CAAC;CACZC,QAAAA,SAAS,EAAE2D,QAAQ,GAAG,CAAC,GAAG,CAAC;CAC3B1D,QAAAA,YAAY,EAAE0D,QAAQ,GAAG,CAAC,GAAG,CAAC;CAC9BzD,QAAAA,aAAa,EAAE,CAAC;CAChBG,QAAAA,SAAS,EAAEsD,QAAQ,GAAG,CAAC,GAAG,CAAA;QAC7B,CAAA;CAED,MAAA,IAAI,CAAC,IAAI,CAACd,QAAQ,IAAImB,MAAM,CAACC,QAAQ,CAACpW,MAAM,KAAK,CAAC,EAAE;SAChD,IAAI,CAACgV,QAAQ,GAAG,IAAI,CAAA;SACpBmB,MAAM,CAACU,WAAW,GAAGV,MAAM,CAACC,QAAQ,CAACG,GAAG,CAAC,CAAC,CAAC,CAAA;CAC/C,OAAA;CAEA,MAAA,IAAI,CAAC,IAAI,CAAC5B,UAAU,IAAIwB,MAAM,CAACW,UAAU,GAAG,CAAC,IAAIX,MAAM,CAACY,WAAW,GAAG,CAAC,EAAE;SACrE,IAAI,CAACpC,UAAU,GAAG,IAAI,CAAA;CAC1B,OAAA;CACJ,KAAA;CAAC,GAAA,EAAA;KAAAzV,GAAA,EAAA,eAAA;CAAAC,IAAAA,KAAA,EAED,SAAAkX,aAAAA,CAAcC,KAAK,EAAEC,GAAG,EAAE;OACtB,IAAI,IAAI,CAACS,WAAW,IAAI,IAAI,CAAClC,YAAY,CAACmC,QAAQ,KAAK,KAAK,EAAE;SAC1D,IAAI;WACA,IAAI,CAACnC,YAAY,CAACoC,MAAM,CAACZ,KAAK,EAAEC,GAAG,CAAC,CAAA;UACvC,CAAC,OAAO/W,CAAC,EAAE;CACR8E,UAAAA,OAAO,CAACkB,IAAI,CAAC,sBAAsB,EAAEhG,CAAC,CAAC,CAAA;CAC3C,SAAA;CACJ,OAAC,MAAM;CACH8E,QAAAA,OAAO,CAACkB,IAAI,CAAC,oCAAoC,EAAE,IAAI,CAACwR,WAAW,EAAE,4BAA4B,EAAE,IAAI,CAAClC,YAAY,CAACmC,QAAQ,CAAC,CAAA;CAClI,OAAA;CACJ,KAAA;CAAC,GAAA,EAAA;KAAA/X,GAAA,EAAA,eAAA;CAAAC,IAAAA,KAAA,EAED,SAAAwW,aAAc3N,CAAAA,MAAM,EAAE;CAClB,MAAA,IAAI,IAAI,CAAC8M,YAAY,KAAK,IAAI,EAAE;SAC5B,IAAI,CAACA,YAAY,GAAG,IAAI,CAACG,WAAW,CAACkC,eAAe,CAAC,iCAAiC,CAAC,CAAA;CAC3F,OAAA;OAEA,IAAI,IAAI,CAACrC,YAAY,CAACmC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAACD,WAAW,EAAE;SAC1D,IAAI;CACA,UAAA,IAAI,CAAClC,YAAY,CAACsC,YAAY,CAACpP,MAAM,CAAC,CAAA;CAC1C,SAAC,CAAC,OAAOxI,CAAC,EAAE,EACZ;CACA,QAAA,OAAA;CACJ,OAAA;OAEA,IAAI,IAAI,CAAC6X,aAAa,EAAE;CACpB/S,QAAAA,OAAO,CAACkB,IAAI,CAAC,uBAAuB,CAAC,CAAA;CACzC,OAAC,MAAM,IAAI,IAAI,CAAC8R,YAAY,EAAE;CAC1BhT,QAAAA,OAAO,CAACkB,IAAI,CAAC,sBAAsB,CAAC,CAAA;CACxC,OAAC,MAAM;CACH,QAAA,IAAI,IAAI,CAACsP,YAAY,CAACmC,QAAQ,KAAK,IAAI,EAAE;CACrC3S,UAAAA,OAAO,CAACkB,IAAI,CAAC,gCAAgC,CAAC,CAAA;CAClD,SAAA;CACJ,OAAA;CAEJ,KAAA;CAAC,GAAA,EAAA;KAAAtG,GAAA,EAAA,OAAA;KAAAqY,GAAA,EAED,SAAAA,GAAAA,GAAY;OACR,OAAO,IAAI,CAACtC,WAAW,IAAI,IAAI,CAACA,WAAW,CAACuC,UAAU,CAAA;CAC1D,KAAA;CAAC,GAAA,EAAA;KAAAtY,GAAA,EAAA,cAAA;KAAAqY,GAAA,EAED,SAAAA,GAAAA,GAAmB;CACf,MAAA,OAAO,IAAI,CAACjU,KAAK,KAAK8Q,kBAAkB,CAACC,KAAK,CAAA;CAClD,KAAA;CAAC,GAAA,EAAA;KAAAnV,GAAA,EAAA,eAAA;KAAAqY,GAAA,EAED,SAAAA,GAAAA,GAAoB;CAChB,MAAA,OAAO,IAAI,CAACjU,KAAK,KAAK8Q,kBAAkB,CAACG,MAAM,CAAA;CACnD,KAAA;CAAC,GAAA,EAAA;KAAArV,GAAA,EAAA,aAAA;KAAAqY,GAAA,EAED,SAAAA,GAAAA,GAAkB;CACd,MAAA,OAAO,IAAI,CAACjU,KAAK,KAAK8Q,kBAAkB,CAACE,IAAI,CAAA;CACjD,KAAA;CAAC,GAAA,CAAA,CAAA,CAAA;CAAA,EAAA,OAAAE,UAAA,CAAA;CAAA,CAAA,CAtLoBzV,OAAO,CAAA;;CChKhCmW,MAAM,CAACrS,UAAU,GAAGA,UAAU,CAAA;CAC9BqS,MAAM,CAACV,UAAU,GAAGA,UAAU,CAAA;AAC9B,aAAe;CACX3R,EAAAA,UAAU,EAAVA,UAAU;CACV2R,EAAAA,UAAU,EAAVA,UAAAA;CACJ,CAAC;;;;;;;;"}